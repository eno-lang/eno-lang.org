# Demo 01: Hello World

-- markdown
This demo simply reads in a single (required) field from the document.
Remove or rename the field to see the error output enojs produces!
-- markdown

-- eno
Greeting: Hello World
-- eno

-- javascript
const options = {
  locale: 'de',
  reporter: 'html'
};

const doc = eno.parse(input, options);

return doc.field('Greeting', { required: true });
-- javascript

-- python
# Emulated mode - code is read-only

doc = enopy.parse(input,
                  locale='de',
                  reporter=enopy.reporters.HTML)

return doc.field('Greeting', required=True)
-- python

-- ruby
# Emulated mode - code is read-only

doc = eno.parse(
  input,
  locale: 'de',
  reporter: Eno::Reporters::HTML
)

return doc.field('Greeting', required: true)
-- ruby

# Demo 02: Sections and Fields

-- markdown
This demo reads in two fields located within a section
-- markdown

-- eno
# City

Name: Vienna
Continent: Europe
-- eno

-- javascript
const doc = eno.parse(input, { reporter: 'html' });

const city = doc.section('City');

const name = city.field('Name', { required: true });
const continent = city.field('Continent', { required: true });

return `The city ${name} is in ${continent}`;
-- javascript

-- python
# Emulated mode - code is read-only

doc = enopy.parse(input, reporter=enopy.reporters.HTML)

city = doc.section('City')

name = city.field('Name', required=True)
continent = city.field('Continent', required=True)

return f"The city {name} is in {continent}"
-- python

-- ruby
# Emulated mode - code is read-only

doc = eno.parse(input, reporter: Eno::Reporters::HTML)

city = doc.section('City')

name = city.field('Name', required: true)
continent = city.field('Continent', required: true)

return "The city #{name} is in #{continent}"
-- ruby

# Demo 03: Loading a custom lat/lng type

-- markdown
This demo reads in coordinates by passing the items of a list through
a custom loader that validates and transforms the input.
-- markdown

-- eno
route_coordinates:
- 48.205870, 16.413690
- 48.219513, 16.405041
- 48.229600, 16.371639
- 48.225857, 16.355580
- 48.220560, 16.364078
- 48.211004, 16.356364
-- eno

-- javascript
const latLngLoader = ({ value }) => {
  const match = /^(\d+\.\d+),\s*(\d+\.\d+)$/.exec(value);

  if(match) {
    return { lat: parseFloat(match[1]), lng: parseFloat(match[2]) };
  }

  throw 'Coordinates must be formatted xx.xxxxxx, xx.xxxxxx';
};

const doc = eno.parse(input, { reporter: 'html' });

return doc.list('route_coordinates', latLngLoader);
-- javascript

-- python
# Emulated mode - code is read-only

import re

def lan_lng_loader(name, value):
  match = re.search('^(\d+\.\d+),\s*(\d+\.\d+)$', value)
  if not match:
    raise ValueError('Coordinates must be formatted xx.xxxxxx, xx.xxxxxx')
  return { 'lat': float(match.group(1)), 'lng': float(match.group(2)) }

doc = enopy.parse(input, reporter=eno.reporters.HTML)

return doc.list('route_coordinates', lan_lng_loader)
-- python

-- ruby
# Emulated mode - code is read-only

lat_lng_loader = Proc.new do |name, value|
  match = value.match(/^(\d+\.\d+),\s*(\d+\.\d+)$/)
  raise 'Coordinates must be formatted xx.xxxxxx, xx.xxxxxx' unless match
  
  { lat: match[1].to_f, lng: match[2].to_f }
end

doc = Eno.parse(input, reporter: Eno::Reporters::HTML)

return doc.list('route_coordinates', lat_lng_loader)
-- ruby

# Demo 04: Looking up elements in the document by line/column

-- markdown
This demo shows how to look up things in the source document by (for instance) cursor position.
-- markdown

-- eno
# Le Demo

Un saludo en español: Hola
A greeting in english: Hello

## Films

魔女の宅急便:
Rating = 5 Stars

Los amantes del círculo polar:
Rating = ⭐⭐⭐⭐⭐   
-- eno

-- javascript
const doc = eno.parse(input, { reporter: 'html' });

// In this example the 'cursor' variable is provided by the demo
// to contain the numerical index of the cursor inside the textarea
// Click/move/type around in the eno textbox to update the result!
const result = doc.lookup(cursor);

return `
  Cursor index #${cursor}
  zone: ${result.zone}
  element: ${result.element}
`.trim();
-- javascript

-- python
# Emulated mode - code is read-only

doc = eno.parse(input, reporter=enopy.reporters.HTML)

# In this example the 'cursor' variable is provided by the demo
# to contain the numerical index of the cursor inside the textarea
# Click/move/type around in the eno textbox to update the result!
result = doc.lookup(cursor)

return f"""
  Cursor index #{cursor}
  zone: {result['zone']}
  element: {result['element']}
"""
-- python

-- ruby
# Emulated mode - code is read-only

doc = eno.parse(input, reporter: Eno::Reporters::HTML)

# In this example the 'cursor' variable is provided by the demo
# to contain the numerical index of the cursor inside the textarea
# Click/move/type around in the eno textbox to update the result!
result = doc.lookup(cursor)

return <<~DOC
  Cursor index ##{cursor}
  zone: #{result[:zone]}
  element: #{result[:element]}
DOC
-- ruby
