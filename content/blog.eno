-- 2020-06-13
- Updated/cleaned up the original language design repository and migrated more resources to the [specification](https://eno-lang.org/specification/)
-- 2020-06-13

-- 2020-06-12
- Implemented internal AST verification for [libeno](https://codeberg.org/simonrepp/libeno)'s examplified spec suite
- Put some heavy thought into how a simple, future-proof public interface for libeno could or should look like
-- 2020-06-12

-- 2020-06-11
- Implemented a proof of concept for systematically testing parsing correctness for [libeno](https://codeberg.org/simonrepp/libeno)
- Implemented assembling of values from line continuations in libeno
-- 2020-06-11

-- 2020-06-10
- Completely overhauled the layout for all documentation pages
- Improved the libraries section on the frontpage
-- 2020-06-10

-- 2020-06-08
After a busy weekend the first big chunk of the website overhaul is complete!
The font selection has been completely redesigned, many subpages were condensed
and their content integrated into the new [frontpage](https://eno-lang.org/),
some fundamental text blocks describing the essence of eno have been rewritten,
the history and future prospects updated, the
[playground](https://eno-lang.org/playground/) now uses a full screen layout
with improved visuals, as does the
[enolib-playground](https://eno-lang.org/enolib-playground/), and much more. In
summary it can be said that eno-lang.org never looked - and worked - this good.

Next up soon for the website I'll be revisiting the documentation pages (guide,
specification, library docs) to improve their layout and organization, as well
as doing a focused review of responsive behavior and accessibility of the page,
to round off the package.

In the meantime I'm now going back to work on the new reference parser, which, I
can happily report, has been successfully put into a real-life usecase already,
powering config and password store parsing for
[sicuit](https://simonrepp.com/sicuit/), a project I'll be first releasing in a
week or so.
-- 2020-06-08

-- 2020-05-24
- Added detailed implementation notes regarding line continuation behavior to the specification
- Released [ace-eno](https://github.com/eno-lang/ace-eno) 0.2.2, which adds a missing escaped empty rule
-- 2020-05-24

-- 2020-05-23
- Development of [libeno](https://codeberg.org/simonrepp/libeno) is progressing
  nicely and steadily, and as expected it's opened up a good avenue for finally
  figuring out the last minute details of eno's specification!
- Today on the side I've also kicked off a process of reworking the website, making it simpler and
  more to the point, removing stack bloat and resolving some responsiveness and
  probably also accessibility issues that still remain.
- I finished and uploaded [revision 2 of the associated comments RFC](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/associated-comments-rev2.md),
  which proposes new, improved whitespace behavior based on research and development over the last months.
-- 2020-05-23

-- 2020-05-01
Over the last two weeks I've begun work on a [new reference parser for eno written in C](https://codeberg.org/simonrepp/libeno). Intentions and motivation for this look as
follows:

- A portable C implementation will compile and run pretty much everywhere,
  opening up many possibilities for people to use eno in new contexts.
- Correctly handling unicode text in C is a challenge, the merit of this
  however is that it really makes you think about what you're doing and 
  the process of implementing the eno specification in C might reveal if
  there are still flaws in the way eno is specified, leading in the end
  to a better parser and a better specification.
- Some fiddly edge case behavior around handling of tabs vs. spaces in the
  context of associated comments is not yet adequately specified in the
  existing parser implementations. Writing the new reference parser presents
  an opportunity to patch up these remaining known minor issues.
- The enolib implementation for Rust is still up in the air, partly due to
  the fact that the low level lexing/parsing hasn't turned out all that
  convenient to implement in (safe) Rust so far - being able to build a
  Rust high level library implementation on a low level C parser foundation
  through the FFI seems like a nice avenue to explore.
- While laying the groundwork for eno's schema definition metaformat (along its
  companion CLI for generating parsers) earlier this year it became obvious
  that availability of the CLI in different environments will be a question
  that needs to be adressed. Availability of a C parser would allow
  implementing and distributing the CLI tool as a static binary, enabling
  easy access on all platforms without specific language runtime requirements.
- The enolib parsers are already among the fastest parsers for structured
  plaintext content out there. It's probably more a vanity thing from here
  on thus, but faster is always nice: If benchmarks showcasing outstanding
  performance (regardless if anyone will ever *need* it) attract an audience
  that later discovers that eno actually excels through its other qualities
  as well, that's a nice side effect.

Development is still at an early stage. You can follow the progress on libeno's
repository on Codeberg: <https://codeberg.org/simonrepp/libeno>
-- 2020-05-01

-- 2020-01-18
Eno is now finally getting a schema definition
metaformat (by popular request) - after two days of hacking (building on
previous efforts from a few months ago) a first prototype for a CLI-based
parser generator is now up on github: <https://github.com/eno-lang/enocli>

Some major loose ends need to be tied up still, but within the next two weeks
or so there will likely be a state that is well usable for all the major, obvious usecases. 🎉
-- 2020-01-18

-- 2020-01-17
- Extended the complete guide to eno with an [FAQ entry](/guide/faq/) regarding indentation and whitespace (thanks Nicholas for reporting the absence of that information!)
-- 2020-01-17

-- 2020-01-11
- Released [enolib](https://github.com/eno-lang/enolib/) 0.8.2 patch update for javascript, fixing three rare but critical issues in the reporter implementation - see
  [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
-- 2020-01-11

-- 2020-01-10
- Released [sublime-eno](https://packagecontrol.io/packages/eno) 0.4.1 for Sublime Text, fixing a multiline field pattern recognition issue reported by Nicholas Reid - thanks Nicholas!

The legacy libraries which have been superseded by enolib (enojs, enopy, enorb) and their respective experimental loader companion packages **have
reached END OF LIFE with the start of 2020 (after 10 months of deprecation)**:

- Unpublished enopy and enopy-exploaders from pypi.org
- Unpublished enorb and enorb-exploaders from rubygems.org
- Removed the enopy enopy-exploaders repositories from github
- Removed the enorb enorb-exploaders repositories from github
-- 2020-01-10

-- 2020-01-08
- Patrick Thomson contributed a
  [patch](https://github.com/eno-lang/tree-sitter-eno/commit/c059967d243487c1c2f567bd56c1d40c9a92dbe4)
  for [tree-sitter-eno](https://github.com/eno-lang/tree-sitter-eno) that resolves compiler-dependent
  compilation issues caused by invalid multi-byte string literal syntax - thanks Patrick!
-- 2020-01-08

-- 2019-10-15
- Released [enolib](https://github.com/eno-lang/enolib/) 0.8.1, adding the possibility to explicitly override 
  the `all_elements_required` state when querying elements through their
  `optional_*` accessors, plus two bugfixes for python and ruby - see
  [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
-- 2019-10-15

-- 2019-08-30
- Did some work on establishing a logo/design/visual identity for eno again in the last days 🎉
- Added a small patch for element operator highlighting in ambiguous elements to [language-eno](https://github.com/eno-lang/language-eno)
- Testing meanwhile revealed that the external tree-sitter scanner architecture
  for multiline field detection will have to be partially rewritten because
  although it works perfectly well for static/one-time parse runs, it seems to
  not be suitable for iterative parsing runs when the already parsed tree is
  updated from a previous state, so there will be some more delay before a
  release in the interest of stability (this can crash Atom in certain
  scenarios).
-- 2019-08-30

-- 2019-08-16
- Released [tree-sitter-eno](https://www.npmjs.com/package/tree-sitter-eno) 0.1.3 with more fixes and improvements - see [changelog](https://github.com/eno-lang/tree-sitter-eno/blob/master/CHANGELOG.md).
- The tree-sitter integration for [language-eno](https://github.com/eno-lang/language-eno) is now pretty much at release candidate status, a few more code folding rules will be added, then it's release time!
-- 2019-08-16

-- 2019-08-04
- Released [tree-sitter-eno](https://www.npmjs.com/package/tree-sitter-eno) 0.1.1 with a critical fix for the bindings and from now on packaging only the minimum required files
- Released [tree-sitter-eno](https://www.npmjs.com/package/tree-sitter-eno) 0.1.2, patching recognition for empty fieldset entries and list items
- Successfully integrated tree-sitter parsing into [language-eno](https://github.com/eno-lang/language-eno), this will be released in the next days, as soon as any remaining obvious issues with tree-sitter-eno are resolved
-- 2019-08-04

-- 2019-08-03
With today's additions
[tree-sitter-eno](https://github.com/eno-lang/tree-sitter-eno) is feature
complete 🎉 Proof of concept integration into
[language-eno](https://github.com/eno-lang/language-eno) and ironing out some
known edge case issues is up next!

- Released [tree-sitter-eno package](https://www.npmjs.com/package/tree-sitter-eno) on npm
-- 2019-08-03

-- 2019-07-31
- Added detailed documentation on error metadata for all enolib implementations
- Pushed onwards with [tree-sitter-eno](https://github.com/eno-lang/tree-sitter-eno) which is now about 90% there
- Contributed back some documentation improvements to tree-sitter 🤝
-- 2019-07-31

-- 2019-07-29
- Added addendum content (complete example, AST inspection, FAQ) to the enolib documentation for all implementations
- Small code example fixes in the ruby enolib documentation
-- 2019-07-29

-- 2019-07-28
Released [enolib](https://github.com/eno-lang/enolib/) 0.8.0, supporting the new [empties](/guide/elements/empties/) 🚀 - see [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
-- 2019-07-28

-- 2019-07-27
- Interactive examples and a guide page on the new [empties](/guide/elements/empties/) has been added
- Various other smaller additions, clarifications and updates inside the language guide and interactive examples
-- 2019-07-27

-- 2019-07-26
- Multiple updates to [prism-eno](https://github.com/eno-lang/prism-eno), greatly improving multiline field recognition robustness, handling various edge cases, adding support for the new [empties](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/explicit-empty.md) and more
-- 2019-07-26

-- 2019-07-24
- Released [language-eno](https://atom.io/packages/language-eno) 0.5.0 for Atom, adding support for the new [empties](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/explicit-empty.md)
-- 2019-07-24

-- 2019-07-19
- Released [vscode-eno](https://marketplace.visualstudio.com/items?itemName=eno-lang.vscode-eno) 0.4.0 for Visual Studio Code, adding support for the new [empties](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/explicit-empty.md)
- Released [sublime-eno](https://packagecontrol.io/packages/eno) 0.4.0 for Sublime Text, adding support for the new [empties](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/explicit-empty.md)
-- 2019-07-19

-- 2019-07-17
Currently working on resolving numerous smaller but intricate bugs in the syntax
highlighting implementations for [prism.js](https://github.com/eno-lang/prism-eno/)
and [Ace](https://github.com/eno-lang/ace-eno/). Additionally about three weeks
were spent on getting the [tree-sitter C parser
implementation](https://github.com/eno-lang/tree-sitter-eno) to about 80% of
completion. The tree-sitter parser will enable the atom plugin for eno to offer
perfect code folding as well as rock-solid stability and improved performance.
Also through the various bindings it will give everyone a means for super fast
basic eno parsing in C, C++, Rust and other low level languages!
-- 2019-07-17

-- 2019-06-19
- Published an [RFC for Empties](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/explicit-empty.md) (explicit key-only elements) - an implementation for evaluating this RFC for is already ready and will be released through enolib in the coming days.
- Migrated most of the specification resources in the eno core repository to the eno-lang.org repository (because single source of truth)
- Added portfolio page and color scheme example documents to the interactive eno document browser
-- 2019-06-19

-- 2019-06-12
Released [enolib](https://github.com/eno-lang/enolib/) 0.7.2 with minor patching and refactoring regarding the semantical analysis of lines triggering parse errors  - see [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
-- 2019-06-12

-- 2019-06-11
Released [enolib](https://github.com/eno-lang/enolib/) 0.7.0 with new, simpler interfaces for requiring additional locales and reporters - this is a breaking change if you are using them - see [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
-- 2019-06-11

-- 2019-06-08
Released [sublime-eno](https://packagecontrol.io/packages/eno) 0.3.0 for Sublime Text, featuring highlighting differentiation for sections as well as scope terminology updates to comply with the latest language specification.
-- 2019-06-08

-- 2019-06-04
Released [vscode-eno](https://marketplace.visualstudio.com/items?itemName=eno-lang.vscode-eno) 0.3.0 for Visual Studio Code, featuring highlighting differentiation for sections as well as scope terminology updates to comply with the latest language specification.
-- 2019-06-04

-- 2019-05-31
Released [language-eno](https://atom.io/packages/language-eno) 0.4.3 for Atom, updating some scope terminology in accordance with the latest language specification.
-- 2019-05-31

-- 2019-05-29
Released [enolib](https://github.com/eno-lang/enolib/) 0.6.0 with a bunch of API additions, fixes and polish, mostly around element lookups - see [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
-- 2019-05-29

-- 2019-05-27
- Implemented generative, exhaustive lookup testing for the python implementation of enolib
- Added a small correction for explicitly handling document key requests in the python and ruby enolib implementation
- Replaced some accidental python installation snippets in the ruby documentation
-- 2019-05-27

-- 2019-05-17
- Published [complete documentation](/ruby/) for the enolib ruby implementation
- Improvements and corrections in the javascript and python enolib documentation
-- 2019-05-17

-- 2019-05-16
Published the official deprecation announcement releases for enorb and enorb-exploaders (now superseded by enolib and enotype respectively)
-- 2019-05-16

-- 2019-05-10
Released [enolib](https://pypi.org/project/enolib/) 0.5.2 with a minor fix on all platforms and a heap of smaller corrections and refactoring in the ruby implementation  - [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
-- 2019-05-10

-- 2019-05-05
Published a python-only [enolib](https://pypi.org/project/enolib/) 0.5.1 release with lots of fixes and clean up, including a contribution from Massimo Redaelli (thank you!) - [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
-- 2019-05-05

-- 2019-05-04
Released ruby-only [enotype](https://rubygems.org/gems/enotype) release 0.3.1, most prominently including a helper method to obtain all loaders as a hash of procs for easily passing around loaders and registering them with enolib - [changelog](https://github.com/eno-lang/enotype/blob/master/CHANGELOG.md).
-- 2019-05-04

-- 2019-04-22
Released [language-eno](https://atom.io/packages/language-eno) 0.4.2 for Atom, including a long planned visual tweak to better differentiate sections and minor scope changes for better convention compliance - [changelog](https://github.com/eno-lang/language-eno/blob/master/CHANGELOG.md).
-- 2019-04-22

-- 2019-04-21
Released [enolib for ruby](https://rubygems.org/gems/enolib) 🚀

Also published 0.5.0 for javascript and ruby, adding two minor missing section accessors - see [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
-- 2019-04-21

-- 2019-04-20
- enolib's ruby implementation is getting close to release state! After today's effort well over 60% of the spec suite are now passing and we're on track for a release in the next ten days. 🎉 
- Also the python enolib implementation was switched to 4-space indentation today (because standards)
-- 2019-04-20

-- 2019-04-16
- Released [enolib](https://github.com/eno-lang/enolib/) 0.4.3 with a critical patch for python contributed by Clément Pit-Claudel (merci!), as well as minor optimizations - see [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
- Ported all of the latest missing element implementations to Ruby
- Ported the latest document element lookup implementation to Ruby
-- 2019-04-16

-- 2019-04-14
- Ported the latest section, element and value element base implementations to Ruby
- Various smaller optimizations and refactoring in the enolib javascript and python implementations
-- 2019-04-14

-- 2019-04-10
- Ported the latest text reporter implementation to Ruby, fixed various other port issues
-- 2019-04-10

-- 2019-04-07
- Ported the latest error reporter base implementation to Ruby
-- 2019-04-07

-- 2019-04-06
- Ported the second half of the parser code, copy resolution, parsing error builders and error selection helpers to Ruby
- Released [enolib](https://github.com/eno-lang/enolib/) 0.4.2 with minor fixes and optimizations - see [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
-- 2019-04-06

-- 2019-04-05
Ported the first half of the latest enolib parsing implementation to Ruby
-- 2019-04-05

-- 2019-04-02
Released [enolib](https://github.com/eno-lang/enolib/) 0.4.1 with minor fixes and python package documentation additions - see [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
-- 2019-04-02

-- 2019-04-01
Added complete [python documentation](/python/) for enolib
-- 2019-04-01

-- 2019-03-31
🚀 Released [enolib](https://github.com/eno-lang/enolib/) 0.4.0 for python - [package on PyPI](https://pypi.org/project/enolib/)
-- 2019-03-31

-- 2019-03-30
- More work on getting enolib for python release-ready - well over 50% of the specs are passing as of now and everything's looking good for an early april release!
- Released [enolib](https://github.com/eno-lang/enolib/) 0.3.5 for javascript with a minor bugfix and optimizations - see [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
-- 2019-03-30

-- 2019-03-29
- Released [enolib](https://github.com/eno-lang/enolib/) 0.3.4 for javascript with a multitude of fixes and minor optimizations - see [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
- Ported the enolib copy resolver implementation to python and decimated a few hundred port issues all over the codebase - roughly a fifth of the spec suite passes now.
-- 2019-03-29

-- 2019-03-27
Ported the bulk of the new enolib core architecture and parser implementation to python - some specs already run through and if nothing fundamental gets in the way things are nicely on schedule for an early april release. 🎉
-- 2019-03-27

-- 2019-03-24
- Ported enolib's loader registering and new reporter base implementation to python.
- Added missing documentation for AST inspection in enolib and an FAQ page on direct object serialization (thanks zaiste for the feedback!)
-- 2019-03-24

-- 2019-03-23
- Ported enolib's latest lookup implementation to python.
- Released [enolib](https://github.com/eno-lang/enolib/) 0.3.3 for javascript with various lookup and detail fixes - see [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
- Implemented exhaustive generative lookup testing over full document ranges for enolib.
-- 2019-03-23

-- 2019-03-22
- Released [enotype](https://github.com/eno-lang/enotype/) 0.3.0 for javascript, php, python and ruby with the new IPv4 loader.
- Ported much of the element implementations in enolib to python
- Released [enolib](https://github.com/eno-lang/enolib/) 0.3.2 for javascript with minor fixes - see [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md).
-- 2019-03-22

-- 2019-03-21
- Imlemented an IPv4 loader for enotype.
-- 2019-03-21

-- 2019-03-20
- Released [enotype](https://github.com/eno-lang/enotype/) 0.2.0 for javascript, php, python and ruby with a new slug loader and new and extensive, generated documentation.
-- 2019-03-20

-- 2019-03-16
- Released [enolib](https://github.com/eno-lang/enolib/) 0.3.1 with fixes for index lookup edge cases, also this version is the first to ship with in-code JSDoc documentation, although not complete yet.
- Added implementation details for template namespaces to the specification documents
- Bugfixes for the interactive eno and enolib demos on the website
-- 2019-03-16

-- 2019-03-15
Went out for the world climate strike day, answered lots of great questions and ideas on GitHub and marked all legacy ecosystem javascript packages on npm as deprecated - they will be end of life at the beginning of 2020.
-- 2019-03-15

-- 2019-03-13
The new [javascript documentation](/javascript/) for enolib is now feature-complete and covers all base functionality.
-- 2019-03-13

-- 2019-03-12
- Lots of new content and restructuring on the website 🎉
-- 2019-03-12

-- 2019-03-10
- Released enolib 0.3.0 which solves an important architectural blocker around touching behavior for copied element hierarchies ([changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md)).
- Writing documentation, restructuring content and cleaning up the new website.
-- 2019-03-10

-- 2019-03-09
Released enolib 0.2.0 ([changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md)) and
the new transitional website, everything here is still heavily work in progress right now.
-- 2019-03-09

-- 2019-03-03
Released enolib 0.1.1 with error reporting fixes and two new query methods - see [changelog](https://github.com/eno-lang/enolib/blob/master/CHANGELOG.md)
-- 2019-03-03

-- 2019-03-02
Worked on rebooting the website the last days, splitting it into an archived
eno/first version and the soon default final ecosystem branch. Also wrote some
of the coming documentation for enolib and did some major redesign work for the
final branch of the website.
-- 2019-03-02

-- 2019-02-27
It's shipping day again! 🎉 The JS implementation for the new flagship [enolib](https://www.npmjs.com/package/enolib) library was just released as 0.1.0 on [npm](https://www.npmjs.com/package/enolib), and API documentation is coming the next days. The enolib project is the successor to the existing enojs/enophp/enopy/enorb libraries, uniting them under a single name to reflect their close connection (they practically offer 1:1 the same API on all supported languages) and make them easier to recognize between different platforms. Importantly they also implement the living draft for the final specification and offer a greatly overhauled API design and internal architecture, resulting in more functionality, safety, performance and ultimately also fun. More updates coming soon - stay tuned!

- Updated [benchmarks](https://github.com/eno-lang/benchmarks) for the enolib javascript implementation are now available, including test runs that include full document validation and querying.
-- 2019-02-27

-- 2019-02-21
Published [enotype](https://github.com/eno-lang/enotype) 0.1.0 🎉 on [GitHub](https://github.com/eno-lang/enotype/), [npm](https://www.npmjs.com/package/enotype), [PyPI](https://pypi.org/project/enotype/) and [rubygems](https://rubygems.org/gems/enotype)

enotype will be the go-to companion library for the upcoming series of eno parsers
supporting the final specification. It provides all the standard type loaders that presently
are always included with the current eno libraries in a separate package, thereby slimming
down the core and making it unopinionated regarding what types are considered standard.

Additionally, as the readme states, it is "A cross-language standard library for
types.", meaning it can be used in many other contexts apart from eno as well!
The upcoming eno parsers use a simplified model for loader functions - they
always only take a string and produce a converted value (or throw an expection),
whereas in the current libraries they accept variable numbers of parameters
(key, value, internally also a context) in either positional or keyword form
dependent on the language.

As you will notice there is hardly any documentation included right now, that
however will be tackled alongside work on the prerelease libraries over the next
days and weeks.
-- 2019-02-21

-- 2019-02-20
- Full day of detail work on the updated prerelease library element *touching* behavior and internal implementation. 
-- 2019-02-20

-- 2019-02-18
- Published an [RFC for excluding fieldsets from section deep merging](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/exclude-fieldsets-from-section-deep-merging.md)
- Deep refactoring of javascript prerelease library error generator code, cutting down validation errors by a few hundred lines of code
- Adaptation and extension of the cross-platform error specs for the upcoming prerelease libraries
-- 2019-02-18

-- 2019-02-17
- Revised the [associated comments RFC](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/associated-comments-rev1.md) with detailed and updated specification details on whitespace processing
- Implemented the above mentioned whitespace processing rules for the (yet unreleased) javascript prerelease library, plus some object oriented code refactoring
- Optimization work on the javascript prerelease library syntax tree model, achieving significant parser performance gains through on-demand document traversal branch instantiation
-- 2019-02-17

-- 2019-02-16
- Released [enophp](https://github.com/eno-lang/enophp) 0.1.3 with a critical fix for block value construction
- Full-time work on getting the new eno prerelease libraries ready for action
-- 2019-02-16

-- 2019-02-15
- Binge coding on the prerelease libraries
- Published an [RFC for template namespace separation](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/separate-copy-template-namespaces.md)
- Added a section with details on continuation behavior in various special cases to the [single line field RFC](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/restrict-fields-to-a-single-line-rev1.md)
- Revised the [hybrid fieldset RFC](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/hybrid-fieldsets-rev1.md) to prevent misunderstandings caused by the merging behavior JSON metaphor (thanks to Nicholas Prado for the feedback!) 
-- 2019-02-15

-- 2019-02-14
- A long day of cleanup work after the recent sprint
-- 2019-02-14

-- 2019-02-12
Final day of an 8-day long non-stop fulltime development sprint on the eno libraries! 🎉

Huge progress was made on a lot of tricky architectural questions for the next
generation of eno libraries, restructuring and separation of concerns between
the different repositories and projects happened, some 80% of the way to get all
4 existing eno libraries compatible with the final specification was traveled.

The coming weeks will see plenty of cleanup on the results, tying up loose ends
and getting everything in shape for gradual release and announcement. Aaand a
lot of documentation will need to be written or updated. ;)
-- 2019-02-12

-- 2019-02-04
- Finished adaptions for feature-complete final specification support in enojs (a first prerelease will be published soon!) 🎉
-- 2019-02-04

-- 2019-02-03
- Continuing work towards upcoming library prereleases with final specification support
-- 2019-02-03

-- 2019-02-02
- Principal work on adapting [enojs](https://github.com/eno-lang/enojs) and eno's [localized message catalog](https://github.com/eno-lang/eno-locales) in preparation for upcoming library prereleases with support for [eno's final specification](https://github.com/eno-lang/eno/tree/master/rfcs-final-spec)
-- 2019-02-02

-- 2019-01-26
- Published the [RFC for hybrid fieldsets](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/hybrid-fieldsets.md)
-- 2019-01-26

-- 2019-01-19
- Published the [RFC for changing eno's *name* terminology to *key* instead](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/key-terminology.md)
-- 2019-01-19

-- 2019-01-16
- Completed and published the [RFC for restricting field values to a single line](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/restrict-fields-to-a-single-line.md), likely the core piece in the final specification changeset 🎉
-- 2019-01-16

-- 2019-01-14
- Released a completely reengineered language grammar for [prism-eno](https://github.com/eno-lang/prism-eno) alongside One Dark/Light theme adaptations customized for eno, this is now used on eno-lang.org for all pre-rendered code and notation examples 
-- 2019-01-14

-- 2019-01-13
- Published fully updated [benchmarks](https://github.com/eno-lang/benchmarks) with all the lastest libraries and an extended set of python benchmarks 🎉
- Added a last blog update badge to the index page, plus a fresh color coat
-- 2019-01-13

-- 2019-01-12
- Released [vscode-eno](https://marketplace.visualstudio.com/items?itemName=eno-lang.vscode-eno) 0.2.0 with improved grammar and syntax scope/coloring interplay
-- 2019-01-12

-- 2019-01-10
- Research and progress for the upcoming vscode-eno update
-- 2019-01-10

-- 2019-01-06
- Released [sublime-eno](https://packagecontrol.io/packages/eno) 0.2.0 with an improved grammar and sublime default theme customizations for eno
- Released [language-eno](https://github.com/eno-lang/language-eno) 0.4.1 with small grammar optimizations and an added screenshot in the readme
-- 2019-01-06

-- 2019-01-04
- Refactoring of website internals to facilitate upcoming features
- Re-evaluated the ruby [benchmarks](https://github.com/eno-lang/benchmarks) with latest libraries
-- 2019-01-04

-- 2019-01-03
- Upgraded the blog from a generic markup page to a dedicated page generated with semantic data as a prerequisite for further website changes
- Refactoring of website internals to facilitate upcoming features
- Added fieldset reference examples to the [language demos](/playground/)
- Mixed patterns spec improvements and corrections for enojs and enorb
-- 2019-01-03

-- 2019-01-02
- Released [enophp](https://github.com/eno-lang/enophp) 0.1.2 with pattern matching core patches and improvements
- Released [language-eno](https://github.com/eno-lang/language-eno) 0.4.0 with redesigned custom highlighting based on syntax theme variables and an improved grammar
-- 2019-01-02

-- 2019-01-01
- Work on the upcoming [enophp](https://github.com/eno-lang/enophp) stability release
-- 2019-01-01

-- 2018-12-31
- Design research and tooling improvements for [plugin color schemes](https://github.com/eno-lang/color-schemes)
-- 2018-12-31

-- 2018-12-30
- Began porting recent library patches and extending specs for [enophp](https://github.com/eno-lang/enophp)
- Iterative work on refining syntax scopes and matching rules for the atom/sublime eno grammars, including color scheme adaptions
-- 2018-12-30

-- 2018-12-25
- Released [enopy](https://github.com/eno-lang/enopy) 0.9.2 with patches to the grammar matching core
- Ported enojs' extensive grammar matching test suite to enopy as well
- Released [language-eno](https://github.com/eno-lang/language-eno) 0.3.4 removing a faulty stray asterisk from a syntax matching rule
- Packaged the completed [ace editor eno extension](https://github.com/eno-lang/ace-eno) and integrated it on the website 🎉
-- 2018-12-25

-- 2018-12-23
- The [language demos](/playground/) now utitilize the freshly finished eno support for Ace editor - enjoy full syntax highlighting inside the in-browser editor!
- Released [enorb](https://github.com/eno-lang/enorb) 0.10.3 with patches and improvements to the grammar matching core
- Released [enojs](https://github.com/eno-lang/enojs) 0.17.2 with an edge case block pattern fix and some escape matching pattern hardening
-- 2018-12-23

-- 2018-12-22
- Deployed the shiny new document inspector on the [language demo page](/playground/), this should provide great insight into the examples and an easy jumpstart to interactively explore how eno documents work - browse away and enjoy the magic! 🧙

- Released [enojs](https://github.com/eno-lang/enojs) 0.17.0 🚢
  
  This release introduces a dependency-injection based reporter architecture, which is a **breaking change
  in case you are specifying a custom reporter in your code** - the [changelog](https://github.com/eno-lang/enojs/blob/master/CHANGELOG.md)
  provides instructions on what needs to be changed in that case.
  
  The gain of this is the possibility for users to implement custom reporters, consistency with the other eno libraries (which all use
  dependency injection for their reporters) and as a collateral bonus it resolves an issue when using [parcel](https://parceljs.org/)
  to bundle up eno in a web stack.

- Yet another enojs release (0.17.1) fixing an issue in the grammar matching core which can lead to a specific invalid line pair getting faultily tokenized instead of triggering an error. The patch will be ported to enophp, enopy and enorb in the next days, which also employ the flawed matching pattern.
- More refactoring and maintenance on the website internals 
-- 2018-12-22

-- 2018-12-21
- Added *what if ... ?* demos (Cargo.eno, package.eno, .gitlab-ci.eno) to the [language demo page](/playground/)
- Began work on eno syntax highlighting support in Ace editor for usage on eno-lang.org - [ace-eno](https://github.com/eno-lang/ace-eno) 🎉
- Some refactoring and maintenance on the website internals
-- 2018-12-21

-- 2018-12-15
- Implemented a better scaling responsive subnavigation in preparation for upcoming website additions
- There is now a page to interactively [try out the language](/playground/) by itself (Thanks to Matt Lewis for his PR and feedback that got this started!)
-- 2018-12-15

-- 2018-12-14
- Corrected a [non-spec-compliant example](https://github.com/eno-lang/enojs/issues/4) in the library documentation (Thanks to Brayden Banks for reporting!)
-- 2018-12-14

-- 2018-12-11
- Fleshing out the [enors](https://github.com/eno-lang/enors) error reporter implementation basis
- Optimizations for line classification in [enojs](https://github.com/eno-lang/enojs), plus cleaning out stale code
-- 2018-12-11

-- 2018-12-09
- Development and studying for [enors](https://github.com/eno-lang/enors)
-- 2018-12-09

-- 2018-12-08
- Research and adaptions in [enors](https://github.com/eno-lang/enors) for the Rust 2018 edition
-- 2018-12-08

-- 2018-12-07
- Added the third RFC for the final eno specification to the [eno language repository](https://github.com/eno-lang/eno)
- Released [language-eno](https://atom.io/packages/language-eno) 0.3.3 for Atom which patches a discovered syntax highlighting irregularity.  
-- 2018-12-07

-- 2018-12-05
- Adaptations on the frontpage to improve understandability of some of eno's concepts (based on insights from HN - thanks to all commenters!)
- Added the first two RFCs for the final eno specification to the [eno language repository](https://github.com/eno-lang/eno)
- Arrived at a breakthrough for the first major blocker in the [enors](https://github.com/eno-lang/enors) implementation 🎉
-- 2018-12-05

-- 2018-12-04
- Research and studying on Rust specific issues for [enors](https://github.com/eno-lang/enors)
-- 2018-12-04

-- 2018-12-02
- Quality time with and some package preparation tasks for [enors](https://github.com/eno-lang/enors)
-- 2018-12-02

-- 2018-12-01
- Foundational development work on [enors](https://github.com/eno-lang/enors)
-- 2018-12-01

-- 2018-11-30
- Development of [enors](https://github.com/eno-lang/enors) (Rust) officially continues; a rough release schedule will be announced as soon as there is a basis to estimate from. Let's see if there'll be one more present under the christmas tree! 🎄
-- 2018-11-30

-- 2018-11-08
- Today [enophp](https://github.com/eno-lang/enophp) was publicly released on [packagist.org](https://packagist.org/packages/eno-lang/enophp)! 🚀
-- 2018-11-08

-- 2018-11-05
- [Progress](https://github.com/eno-lang/eno/pull/4) on the ABNF eno specification document - many thanks go to nzen / Nicholas for the contribution!
-- 2018-11-05

-- 2018-11-04
- Major refactoring, cleanup and layout corrections on eno-lang.org
- Detail work and completion of the enophp documentation
- Many collateral corrections in the enojs/py/rb docs
- Implement dynamic loader signatures in enophp
- Wrap up enophp's parse implementation and add specs for it
-- 2018-11-04

-- 2018-11-03
- Initial rough work on the enophp documentation
- Major refactoring, cleanup and layout corrections on eno-lang.org
-- 2018-11-03

-- 2018-11-02
- Implemented all of enophp's built-in loaders and added the complete spec suite for them
- Added lookup call specs, extended section element specs and various bugfixes for enophp
-- 2018-11-02

-- 2018-11-01
- Added specs for all 43 enophp element type mismatch errors, wrapping up the full error spec suite
-- 2018-11-01

-- 2018-10-31
- Added a good third of the enophp validation error generator specs
- Various bugfixes around enophp's error generation
-- 2018-10-31

-- 2018-10-30
Today [enophp](https://github.com/eno-lang/enophp) reached feature-complete
state! In the coming days the remaining missing parts of the testsuite will be
implemented (which will likely entail some bugfixing), alongside some detail
considerations around loaders. Also, importantly, the documentation for enophp
on eno-lang.org will be set up. After that it's release time!

- Completed all of enophp's element implementations
- Added complete specs for all element implementations in enophp
- Various fixes and tweaks throughout the enophp implementation
- Small update to the eno-lang.org api documentation format and generator
-- 2018-10-30

-- 2018-10-28
- Spent some time working on line continuations for the future second/final eno spec
- Completed enophp's EmptyElement implementation including full specs
- Implementation of all enophp validation error generators
- Finish Field implementation in enophp including complete specs
- Complete ListElement implementation in enophp
- Added typehints throughout the enophp codebase
-- 2018-10-28

-- 2018-10-27
- Implemented enophp's resolver component and all error generators
- Added construction/verification scaffolding for all enophp element implementations
- Added a full testsuite for both the resolver and all error generators in enophp
-- 2018-10-27

-- 2018-10-26
- Fully implemented enophp's analyzer component and all analysis error generators
- Added complete specs for all analysis error types in enophp
- Research and major refactoring to accomodate for php language idiosyncracies
-- 2018-10-26

-- 2018-10-24
- Completed the full enophp tokenizer implementation and testsuite
- Various critical bugfixes around enophp's reporter implementations
- Implemented all enophp tokenization error generators plus the complete testsuite
-- 2018-10-24

-- 2018-10-23
After some time off to a) earn money and thereby cross-finance the next months of eno development,
b) gather more insights in the currently largest production usecase of eno and c) recharge batteries :)
development is now continuing!

Getting the enophp implementation feature-complete in november is the current development target,
with the enors (rust) implementation coming up next on the roadmap, likely to commence around december.

- Heavily improved the still lacking snapshot testing feature basis for the [enophp](https://github.com/eno-lang/enophp) implementation and testsuite.
- Implemented 90% of the standard eno tokenizer testsuite for enophp, plus a handful of bugfixes and general cleanup work
- Added missing support for non-section "noop deep copy" operators for enophp's tokenizer
-- 2018-10-23

-- 2018-09-25
- [enophp](https://github.com/eno-lang/enophp) (in its early stage) received a quick PHP expert audit from Alexander Sulz - thanks! 
-- 2018-09-25

-- 2018-09-09
- Implemented all exception types (Error, ParseError, ValidationError) for [enophp](https://github.com/eno-lang/enophp).
-- 2018-09-09

-- 2018-09-02
- Implemented HTML & Terminal reporting, as well as most of the empty element implementation for [enophp](https://github.com/eno-lang/enophp).
-- 2018-09-02

-- 2018-08-26
- Implemented base text reporting for [enophp](https://github.com/eno-lang/enophp), plus some essential snapshot testing prerequisites.
-- 2018-08-26

-- 2018-08-22
- Multiple documented real usecase examples and a Q&A document added to the [core repository](https://github.com/eno-lang/eno).
-- 2018-08-22

-- 2018-08-19
- More work on the [core language documentation](https://github.com/eno-lang/eno) (ABNF progress, examples collection, details in textual form).
-- 2018-08-19

-- 2018-08-18
- Released enorb 0.10.2 with fixes to ensure compatibility with the ruby 2.3 and 2.4 series ([changelog](https://github.com/eno-lang/enorb/blob/master/CHANGELOG.md)) - thanks to Ralf Ebert for reporting the issues!
- Added info badges to the library documentation pages to indicate how the docs can be edited by everyone who'd like to contribute.
- Some work towards completing the eno ABNF [specification document](https://github.com/eno-lang/eno/blob/master/eno.abnf).
-- 2018-08-18

-- 2018-08-17
- eno was on the HN frontpage and gained important public exposure - I'd like to say thanks to everyone who helped spread the word, asked fantastic questions and all the encouragement, PRs and reports that followed in the wake! These were intense and important 48 hours, now the steady work on eno and the ecosystem continues.
-- 2018-08-17

-- 2018-08-15
- Released [enojs-exploaders](https://github.com/eno-lang/enojs-exploaders) 0.2.2 with a new `htmlEscaped` loader ([changelog](https://github.com/eno-lang/enojs-exploaders/blob/master/CHANGELOG.md)).
-- 2018-08-15

-- 2018-08-13
- Released enorb 0.10.1 with a bugfix addressing an undefined element link for block lookups ([changelog](https://github.com/eno-lang/enorb/blob/master/CHANGELOG.md)).
- Released enopy 0.9.1 with a bugfix addressing an undefined element link for block lookups, as well as yet unreleased optimizations ([changelog](https://github.com/eno-lang/enopy/blob/master/CHANGELOG.md)).
-- 2018-08-13

-- 2018-08-09
- Released enojs 0.16.1 with a bugfix addressing an undefined element link for block lookups, as well as yet unreleased optimizations ([changelog](https://github.com/eno-lang/enojs/blob/master/CHANGELOG.md)).
-- 2018-08-09

-- 2018-08-04
- Released [enojs-exploaders](https://github.com/eno-lang/enojs-exploaders) 0.2.1 with a new `enum` loader, the project now also has a [changelog](https://github.com/eno-lang/enojs-exploaders/blob/master/CHANGELOG.md).
-- 2018-08-04

-- 2018-07-28
- Officially kicked off development for the rust library implementation - [enors](https://github.com/eno-lang/enors).
-- 2018-07-28

-- 2018-07-28
- Rebooted the [eno](https://github.com/eno-lang/eno) core language repository as the central collection point for all specification documents.
- Authored a new [terminology](https://github.com/eno-lang/eno/blob/master/TERMINOLOGY.md) document, describing the entire terminology employed by the eno language.
- Some more rust implementation basic research.
-- 2018-07-28

-- 2018-07-27
- Some early research for the planned rust implementation.
-- 2018-07-27

-- 2018-07-26
- [sublime-eno](https://packagecontrol.io/packages/eno) is now available on [packagecontrol.io](https://packagecontrol.io/) - big kudos to them, every package gets hand-reviewed (!!).
-- 2018-07-26

-- 2018-07-25
- Did a first production study of one of the eno logo designs in [blender](https://blender.org).
-- 2018-07-25

-- 2018-07-24
- Added some light performance optimizations for structural validation in enojs and enopy.
- Spent a late hour sketching possible eno logo designs.
-- 2018-07-24

-- 2018-07-22
- Released enojs 0.16.0 ([Changelog](https://github.com/eno-lang/enojs/blob/master/CHANGELOG.md)), enopy 0.9.0 ([Changelog](https://github.com/eno-lang/enopy/blob/master/CHANGELOG.md)) and enorb 0.10.0 ([Changelog](https://github.com/eno-lang/enorb/blob/master/CHANGELOG.md)).
- More work on [color schemes](https://github.com/eno-lang/color-schemes), bringing [enokai](https://rawgit.com/eno-lang/color-schemes/master/dist/html/enokai.html) and [enorphin](https://rawgit.com/eno-lang/color-schemes/master/dist/html/enorphin.html) up to release quality and adding a sublime generator.
-- 2018-07-22

-- 2018-07-21
**`Dictionary` elements are now called `Fieldset` elements.** This change was
long in the making, addressing a few issues and improving a few aspects of the
original terminology, e.g.: Conceptually, sections are dictionaries as well (in
the generic sense of the term), so this was rather ambiguous. Fieldset indicates
the strong relation to fields - it's really just a way of grouping fields - whereas
dictionary possibly indicated some larger, non-existant difference. Fieldset as a term
also hints at fieldsets in HTML and forms in general, which is also desired because
it's a more user-facing and user-friendly wording and concept.

Note that in the eno language context this is purely a non-functional change, it only
modifies how the language construct is referred to in documentation, error messages,
and by the APIs, but it does not change the way fieldsets/dictionaries work in any way.

- Updated the advanced language guide on the website to use the new fieldset terminology.
- Released eno-locales 0.8.0, adapting all error messages to the new terminology - see [changelog](https://github.com/eno-lang/eno-locales/blob/master/CHANGELOG.md).
- Released enorb 0.9.0 with the new message catalog, fieldset API methods and a shorter base error class name - see [changelog](https://github.com/eno-lang/enorb/blob/master/CHANGELOG.md).
- Released enopy 0.8.0 with the new message catalog and fieldset API methods - see [changelog](https://github.com/eno-lang/enopy/blob/master/CHANGELOG.md).
- Released enojs 0.15.0 with the new message catalog and fieldset API methods - see [changelog](https://github.com/eno-lang/enojs/blob/master/CHANGELOG.md).
-- 2018-07-21

-- 2018-07-20
- Released enopy 0.7.0 with stability contributions from Dan Haiduc and a name change for the base error class - see [changelog](https://github.com/eno-lang/enopy/blob/master/CHANGELOG.md).
-- 2018-07-20

-- 2018-07-18
- Published the [color schemes](https://github.com/eno-lang/color-schemes) repository, with further work on the color scheme meta format and a sublime generator.
- Research and experimentation on how to circumvent Atom's missing generic support for syntax-specific color scheme support.
-- 2018-07-18

-- 2018-07-17
- Started work on a themes project for unified eno syntax theme development for all editors, drafted an *enokai* theme.
-- 2018-07-17

-- 2018-07-15
- Rebooted [enorb-exploaders](https://github.com/eno-lang/enorb-exploaders) as 0.2.0 with a new ipv4 loader, the project now maintains a [changelog](https://github.com/eno-lang/enorb-exploaders/blob/master/CHANGELOG.md).
- Released [vscode-eno](https://marketplace.visualstudio.com/items?itemName=eno-lang.vscode-eno) 0.1.1 with improved syntax scopes for generic theme coloring.
- Rebooted [enopy-exploaders](https://github.com/eno-lang/enopy-exploaders) as 0.2.0 with a new enum loader, the project now maintains a [changelog](https://github.com/eno-lang/enopy-exploaders/blob/master/CHANGELOG.md).
- Updated [sublime-eno](https://github.com/eno-lang/sublime-eno) for the initial 0.1.0 release, submission to [packagecontrol.io](https://packagecontrol.io) is now pending and the package should be officially available there soon.
-- 2018-07-15

-- 2018-07-14
- Lots and lots of small corrections and updates on the website (big thanks to Michael Schwanzer!).
- Released enopy 0.6.2 with [string pseudo loaders](/python/#loaders-string), also enopy now maintains a [changelog](https://github.com/eno-lang/enopy/blob/master/CHANGELOG.md).
-- 2018-07-14

-- 2018-07-13
- Released the [vscode-eno](https://marketplace.visualstudio.com/items?itemName=eno-lang.vscode-eno) language support package for Visual Studio Code.
- Released enopy 0.6.1 with a new [date loader](/python/#loaders-date) and various loader corrections.
- Put on some fresh paint and updated the website color scheme, as well as new plugin pages with screenshots.
- Added a paragraph on language stability and the development plan to the [language](/language/) page.
-- 2018-07-13

-- 2018-07-11
- Released enorb 0.8.1 with a new [date loader](/ruby/#Eno::Loaders-#date) and corrections for the lat/lng loader.
- Adopted the new average ips based perfomance metrics for the enorb optimization tooling and did some housekeeping for the specs suite.
- Did some speculative research and experimentation on the possibility (or maybe rather, likelihood) of an eno Java library.
- Graduated enopy and enorb into regular release status due to coverage degree and acquired stability from fixes ported between all implementations.
- Major website update: New frontpage, structural changes, some new quick tour content for the language, mobile version layout improvements and fixes.
-- 2018-07-11

-- 2018-07-10
- Released enojs 0.14.1 with a new [date loader](/javascript/#loaders-date) and corrections for the lat/lng loader.
- Completely refactored all specs for the enorb loaders.
- Rebooted the [enojs-exploaders](https://www.npmjs.com/package/enojs-exploaders/) package as purely experimental sidetrack to the now available core loaders (with a single new 'slug' loader for now).
-- 2018-07-10

-- 2018-07-09
- Released enorb 0.8.0 with the new core loader API and dynamic loader signatures, see the [updated documentation](/ruby/#Eno::Loaders).
- Released enojs 0.14.0 with the new core loader API, see the [updated documentation](/javascript/#loaders).
- Released enopy 0.6.0 with the new core loader API, see the [updated documentation](/python/#loaders).
- Updated the frontpage introduction video to showcase the new core loader API.
-- 2018-07-09

-- 2018-07-08
- Worked on the internal architecture for the upcoming new core loader APIs, allowing e.g. calls like `document.boolean('publish')`.
-- 2018-07-08

-- 2018-07-07
- Started early experimental development and research for an [eno PHP implementation](https://github.com/eno-lang/enophp/).
-- 2018-07-07

-- 2018-07-06
- Released enojs 0.13.1 with light optimizations, minor fixes and including the new [commaSeparated core loader](/javascript/#loaders-commaSeparated).
- Added remaining dependency resolution test coverage for enojs and cleaned up some older specs, global coverage is now up at 96%.
- Published a new eno introduction video on the frontpage.
- Released enorb 0.7.2 with optimizations for structural validation and the new [CommaSeparated](/ruby/#Eno::Loaders-::CommaSeparated) loader.
- Did some research and initial tests for getting branch coverage metrics in enorb.
- Released enopy 0.5.1 with the new [comma_separated](/python/#enopy.loaders-comma_separated) core loader.
-- 2018-07-06

-- 2018-07-05
- Released enopy 0.5.0, now also providing core loaders for important types out-of-the-box, including the new datetime loader. See the [full documentation](/python/#enopy.loaders).
- Released enorb 0.7.1, which now also offers a datetime core loader.
- Implemented comma-separated value core loaders for all eno implementations
-- 2018-07-05

-- 2018-07-04
- Released enojs 0.13.0 and enorb 0.7.0, now providing core loaders for important types out-of-the-box! See the full documentation for [enojs](/javascript/#loaders) and [enorb](/ruby/#Eno::Loaders).
- The enojs core loaders now also include a datetime loader based on the formats described in <https://www.w3.org/TR/NOTE-datetime>.
- Resolved some potential bottlenecks around list insertions in the enopy implementation, introduced performance measurements based on average ips instead of total duration.
-- 2018-07-04

-- 2018-07-03
- Released enojs 0.12.0, enopy 0.4.0 and enorb 0.5.0, which implement eno's added language support for (new)line continuations on dictionary entries and list items.
- Added complete test coverage for enorb's tokenization as isolated snapshot tests.
- Released enorb 0.6.0 which also adopts the same regex-based tokenization logic used by enojs and enopy - no performance changes found but it fixes multiple issues.
- Released enopy 0.4.1 with fixes for older tokenization regressions.
-- 2018-07-03

-- 2018-07-02
- Released enopy 0.3.1 with a few fixes for section methods.
- Further extended the enopy test suite, bringing coverage up to 90%.
-- 2018-07-02

-- 2018-07-01
- Added more isolated tokenizer snapshot tests and element implementation tests for enojs, coverage now up at 95%.
- Released enojs 0.11.1 with some small fixes for older undiscovered range indexing glitches
- Added more isolated tokenizer snapshot tests for enopy, coverage now up at 87%.
- Released enopy 0.3.0 which adopts the unified regex grammar tokenizer architecture from enojs, resulting in [1-1.2x speed gains](https://github.com/eno-lang/enopy/blob/1b6d6dcc6b610b3f7819d3056d9057cdc7ef0c4a/performance/analysis.json).
- Updated [benchmarks](https://github.com/eno-lang/benchmarks/) with enopy 0.3.0 and ruamel.yaml 0.15.42, with the latter now explicitly using the libyaml based engine.
-- 2018-07-01

-- 2018-06-30
- Released enojs 0.11.0 with a new single-pass tokenizer and much lighter memory and allocation footprint
- Added more isolated tokenizer snapshot tests for enojs to ensure regression-safety.
- Re-run the [benchmarks](https://github.com/eno-lang/benchmarks/), enojs now performs 7x faster than the fastest yaml parser in the content heavy benchmark.
-- 2018-06-30

-- 2018-06-29
- Brought test coverage for enopy up to 83% with tons of tests added for error implementations, dependency resolution, reporters, and more.
- Graduated enopy from Alpha to Beta with release 0.2.10, which includes collected fixes from the last two days.
- Added the last missing validation error implementations for enorb, alongside specs - released with 0.4.8.
-- 2018-06-29

-- 2018-06-28
- Added unit tests for enopy's tokenization, analysis and resolution error implementations and the Dictionary element implementation, coverage is now up at 52%.
- Fixed a minor issue in enopy's duplicate dictionary entry error implementation.
- Added tons of unit tests to enojs (especially covering error implementations), test suite coverage is now up at 93%.
- Released enojs 0.10.6 with various big and small fixes from the last days.
- Updated the [benchmark report](https://github.com/eno-lang/benchmarks/) with better visual scaling at the top ranking performance field, as well as added explanations.
- Added some test scenarios with wide effect for enorb's html and terminal reporters, catalog messages, as well as the dependency resolver, coverage now up at 93%.
- Released enorb 0.4.7 with a critical fix for the html reporter.
-- 2018-06-28

-- 2018-06-27
- Performance optimization release enorb 0.4.6, adressing post-opening block consumption and later allocation with [1.25x speed decreases-3x speed gains](https://github.com/eno-lang/enorb/blob/638261d191649b317225a20b1f53abfbef3fdedb/spec/performance/analysis.json), updated [benchmarks](https://github.com/eno-lang/benchmarks/).
- Released enopy 0.2.8 with a fix for a regression in enopy tokenization, set up a tokenization snapshot test scenario for future prevention.
- Added comprehensive unit tests for enopy's `List` class, released yet another enopy patch release (0.2.9) addressing an older, undiscovered regression.
-- 2018-06-27

-- 2018-06-26
- Started collecting and evaluating test coverage for all eno implementations (currently 66% for enojs, 37% for enopy and 80% for enorb)
- Added some specs for enojs' `Value` class and a fix for a discovered regression.
- Officially graduated enorb from Alpha to Beta status due to coverage and observed stability during usage in the last week.
- Performance optimization release enopy 0.2.7, adressing post-opening block consumption and later allocation with [1-2.7x speed gains](https://github.com/eno-lang/enopy/blob/b884b80011c8af0301dd521396140a240a9eac96/tests/benchmark/analysis.json), updated [benchmarks](https://github.com/eno-lang/benchmarks/).
-- 2018-06-26

-- 2018-06-25
- Performance optimization releases enorb 0.4.4 and enopy 0.2.5, both addressing block content parser performance, with [1-16x speed gains for ruby](https://github.com/eno-lang/enorb/blob/4b8332a2a94061c586084c92bb229be6678d77e4/spec/benchmark/analysis.json) and [1-39x speed gains for python](https://github.com/eno-lang/enopy/blob/64fb14979ea881969a317463b37c4f755bfaa497/tests/benchmark/analysis.json)
- Re-evaluated and updated the global benchmark report at [github.com/eno-lang/benchmarks](https://github.com/eno-lang/benchmarks/)
- More optimizations (enorb 0.4.5, enopy 0.2.6), this time addressing token extraction performance, with [1-2.3x speed gains for ruby](https://github.com/eno-lang/enorb/blob/010be1cdc2efc75ee28b06503a8be8bce1ea1bd6/spec/benchmark/analysis.json) and [1-2.5x speed gains for python](https://github.com/eno-lang/enopy/blob/cb87f11593c87d34c287288ed92004c7893688b8/tests/benchmark/analysis.json), [benchmarks](https://github.com/eno-lang/benchmarks/) updated again.
- Completed the last missing feature texts on the Advanced Features page.
- Improved the [interactive demo](/demo/) layout to make better use of screen space, updated some code snippets.
-- 2018-06-25

-- 2018-06-24
- An [enorb-exploaders](https://rubygems.org/gems/enorb-exploaders) gem is now available as well (with the same featureset as its js/py siblings).
- Improved clarity for some first impression texts on the frontpage (thanks to Dan Haiduc for feedback!).
- New benchmark report at [github.com/eno-lang/benchmarks](https://github.com/eno-lang/benchmarks/) with an additional scenario added that evaluates performance for content-heavy data.
-- 2018-06-24

-- 2018-06-23
- An [experimental enopy loaders](https://test.pypi.org/project/enopy-exploaders/) package is now available too (with the same featureset as its js sibling).
- Refactored the test structure for enopy, test coverage for enopy's `Value` class added, released 0.2.4 with small fixes.
-- 2018-06-23

 -- 2018-06-22
 - **The website now has a dev blog and more contact options. ヽ(^o^)ノ**
 - Two enojs core error implementations (invalid/missing value) have been greatly overhauled and additional tests were added. (0.10.5)
 - enojs now only bundles runtime files
 - The interactive demos at [eno-lang.org/demo](/demo/) now offer emulated, interactive python and ruby code examples as well
 - The benchmark suite at [github.com/eno-lang/benchmarks](https://github.com/eno-lang/benchmarks/) has been expanded from 2 to 5 scenarios, visual fidelity of the full report has been increased
 - The [experimental enojs loaders](https://www.npmjs.com/package/enojs-exploaders/) package now features `color`, `json` and `url` loaders.
 -- 2018-06-22

 -- 2018-06-21
 - An extensive benchmark suite is now available at [github.com/eno-lang/benchmarks](https://github.com/eno-lang/benchmarks/), it evaluates eno library performance across all supported languages, also in relation to popular yaml and toml parsers
 -- 2018-06-21
