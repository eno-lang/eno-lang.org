title: specification

-- intro
# Technical specification

Read this if you implement eno libraries, want to give feedback on the language
design, or are curious. If you just want to use eno, the [language
guide](/eno/guide/) is a better resource, unless you are missing something there
of course, feel free to open an issue on github in that case too.
-- intro

# chapters

## Introduction

-- description
## Encoding

Eno documents **must** be encoded as UTF-8.

## Filename Extension

When saved to disk, eno documents **should** use the .eno extension.

## MIME Type

There are plans to officialy apply to the IANA to get `text/eno` registered as an offical
MIME type for eno documents. If you would like to follow that process or bring in expertise
and support you are very welcome to do so in the respective [issue on github](https://github.com/eno-lang/eno/issues/1).
-- description

### subchapters

#### Terminology

-- description
A complete glossary of terms in the eno notation language, listed alphabetically and in their singular form.

## Associated Comment

```eno
> my associated comment
my_key: my_value
```

A `Comment` that immediately precedes (= without empty lines in between) an `Empty`, `Field`, `Fieldset`, `Fieldset
Entry`, `List`, `List Item` or `Section`, thereby being semantically associated to it and queryable through a parsing
library just as the key and value are.

## Comment

```eno
> my comment
```

A `Comment` is indicated by the `Comment Operator` and followed by arbitrary text.

## Comment Operator

The `>` character (U+003E), when it occurs as the first non-whitespace character on a line, thereby starting a `Comment`.

## Copy Operator

The `<` character (U+003C) when it appears between a `Key` and a `Template`, indicating a copy operation.


## Deep Copy Operator

The `<<` character sequence (two U+003C) when it appears between a `Key` and a `Template`, indicating a deep copy operation.

## Document

The top level structure that contains everything in an `.eno` file.
Conceptually equivalent to a `Section`, but without a key and implicitly always there.

## Direct Line Continuation

```eno
| my value
|
```

A `Direct Line Continuation` can contain a `Value` or be empty.

## Direct Line Continuation Operator

The `|` character (U+007C) when it appears as the first non-whitespace character on a line, indicating a `Direct Line Continuation`.

## Empty

```eno
my_key
```
An `Empty` element is a distinct element type only containing a `Key`.

## Element

All nodes in a `Document` that can later be traversed by an application, that is a `Field`, `Fieldset`, `Fieldset Entry`, `List`, `List Item`, `Multiline Field` or `Section`.

## Element Operator

The `:` character (U+003A) when it appears after a `Key`, optionally followed by a `Value`.

## Escaped Key

```eno
`my_escaped_key`:
```

A `Key` contained between `Escape Operators`.

## Escape Operator

Any number of connected `` ` `` characters (U+0060) when they appear as the first non-whitespace characters in a line, indicating an `Escaped Key`. It must be followed by exactly the same `Escape Operator` later in the same line, terminating the `Escaped Key`.

## Field

```eno
my_key: my value
my_key:
| my value
my_key:
|
```

A `Field` has a `Key` and usually a `Value`. The `Value` does not have to appear in the same line as the `Key`, it can also follow in the form of a `Line Continuation`, which can also be empty, which still suffices to unambiguously identify it as a `Field`.

## Fieldset

```eno
my_key:
my_entry_a = my value
my_entry_b = my value
```
A `Key` followed by any number of `Fieldset Entries`.

## Fieldset Entry

```eno
my_entry = my value
my_entry =
```

A `Fieldset Entry` can have a `Value` or be empty.

## Fieldset Entry Operator

The `=` character when it appears after a `Key`, optionally followed by a `Value`.

## Line Continuation

```eno
\ my value
\
| my value
|
```

Generically refers to either a `Direct Line Continuation` or `Spaced Line Continuation`.
Usually has a `Value` but can also be empty.

## List

```eno
my_key:
- my value
- my value
-
```

A `Key` followed by any number of `List Items`.

## List Item

```eno
- my value
-
```

A `List Item` can have a `Value` or be empty.

## List Item Operator

A `-` character (U+002D), when it appears as the first non-whitespace character in a line, indicating a `List Item`.

## Multiline Field

```eno
-- my_key
my multiline value ...
-- my_key

-- my_key
a
-- my_key

-- my_key
-- my_key
```

A `Multiline Field` has a `Key` and a `Value`. The `Key` appears in the beginning and ending line. It's genuinely empty if there is no line between the beginning and ending line, whereas a single line with 0 characters between the beginning and ending line creates an empty string value.

## Multiline Field Operator

Two or more consecutive `-` characters (U+002D) when they appear as the first
non-whitespace characters on a line and followed by a `Key`, indicating the
begin or end of a `Multiline Field`. The number of hyphens that make up the
`Multiline Field Operator` in the ending line of a `Multiline Field` has to
match the number in the beginning line, just as the `Key` needs to be repeated
exactly, otherwise the whole line is treated as simple text inside the
`Multiline Field`.

## Key

```eno
my_key:
```

The thing that is also referred to as *property*, *identifier*, *variable name* etc. in other languages is always designated as `Key` in eno. A `Key` can be given to
a `Field`, `Fieldset Entry`, `Multiline Field` and `Section`, or appear as a reference in form of a `Template`. Note that conceptually the `Key` of a `List Item` is the `Key` of the list its in, as a
`Value` with no association whatsoever makes little sense in a processable data context.

## Operator

Any of `>`, `<`, `<<`, `:`, `=`, `-`, `--`, `#`, `|`, `\`, `` ` `` when they appear outside of a `Comment`, `Key`, `Template` or `Value`.

## Section

```eno
# my_key
## my_key
```

A `Section` has a `Key` and a `Depth` or `Level`, determined by the number of hashes that make up the `Section Operator`. It contains `Elements`. 

## Section Operator

Any number of connected `#` characters (U+0023) when they appear as the first non-whitespace characters on a line, indicating a `Section`.

## Spaced Line Continuation

```eno
\ my value
\
```

A `Spaced Line Continuation` can contain a `Value` or be empty.

## Spaced Line Continuation Operator

The `\` character (U+005C) when it appears as the first non-whitespace character on a line, indicating a `Line Continuation`.

## Template

```eno
my_key < my_template
# my_key < my_template
# my_key << my_template
```

A `Template` is a `Key` referencing an `Element` to be copied.

## Value

```eno
my_key: my_value
```

A `Value` might appear in a `Field`, `Fieldset Entry`, `List Item` or `Multiline Field`.
`Values` can only include newlines and leading or trailing whitespace when they come from a `Multiline Field`.
-- description

#### Implementation Details

-- description
This is a diverse collection of implementation details anyone that implements an
eno parser will probably wonder about at some point, and hopefully find a conclusive
answer to here. Feel free to expand this document or open an issue if you encounter
an unclear parsing situation not described here.

# Ordering

All data structures in eno respect and retain their ordering, regardless of
whether they conceptually represent key-value structures or key-less lists.

# Continuations

Empty direct line continuations are always ignored, so this ...

```eno
field:
|
| foo
|
| bar
|
```

... produces the value `"foobar"`

Leading and trailing empty spaced line continuations are ignored, so this ...

```eno
field:
\
\ foo
\ bar
\
```

... produces the value `"foo bar"`

In-between empty spaced line continuations do not contribute redundant spacing, so this ...

```eno
field:
\ foo
\
\ bar
```

... produces the value `"foo bar"`

An in-between empty spaced line continuation can contribute spacing, so this ...

```eno
field:
| foo
\
| bar
```

... produces the value `"foo bar"`

Multiple in-between empty spaced line continuations can only contribute spacing once, so this ...

```eno
field:
| foo
\
\
| bar
```

... produces the value `"foo bar"`

# Copying

## Template Namespaces

When looking up a template element for copying, two separate namespaces are
considered. All section elements live in their own namespace, whereas all
non-section elements have their own shared namespace separate from sections.
List items have no namespace (lacking a key they can not be referenced at all)
and the same applies for fieldset entries, who do have a key but are
intentionally excluded from being able to be copied or referenced as template
for copying.

```eno
non_section_namespace: value
 
non_section_namespace:
- value
- value 

non_section_namespace:
no_namespace = value
no_namespace = value

# section_namespace
```

Consequently the following document is valid:

```eno
template: value
copy < template

# template
# copy < template
```

Whereas the ones below each aren't because it's unclear which template to copy:

```eno
template: value
template: value


copy < template
```

```eno
# template
# template

# copy < template
```

And lastly the following document is also invalid because fieldset entries can not be copied:

```eno
fieldset:
entry = value

copy < entry
```

## Deep copy operators in the context of a non-section element

Although the copy operator `<` exists on both sections and non-section elements,
the deep copy operator `<<` is only understood as such by the parsing algorithm
in the context of a section.

Therefore in the following example the parser would look for a template with
the key `'< template'` rather than `'template'`.

```eno
copy << template
```
-- description

#### Specification Refinement

-- description
95% of eno is built on a very simple foundation which has been fully specified,
implemented and stable since mid 2019.

There is a small number of intricate details which comprise the 5% of eno
which are still in the process of being carefullly refined in the interest of
ending up with a completely solid, bullet-proof specification.

These known and either not fully specified or not yet everywhere consistently implemented details are:
- The exact rules for whitespace processing on associated comments, currently specified in this [RFC](https://github.com/eno-lang/eno/blob/master/rfcs-final-spec/associated-comments-rev2.md)
- At present only LF and CR+LF linebreaks are considered as linebreaks by eno parsers - it is still an open question whether other forms of vertical whitespace as they exist in the unicode specification should also be interpreted as significant characters that can terminate values and therefore separate instructions from each other. If you have relevant (i.e. professional or otherwise significant) experience with the factors to consider here, please get in touch, your experience would be greatly appreciated here!
-- description

#### ABNF

-- description
This is an attempt to write as much of eno's specification down as ABNF. Note
that it is currently not complete nor up to date with the final specification,
and that by design it is not possible to cover all aspects of the specification
in that format (or at least not *practically* possible).

```abnf
;; *************************************
;; *                                   *
;; *        WORK IN PROGRESS           *
;; *                                   *
;; *************************************


document = instruction *( 1*newline instruction )


;; Whitespace

ignored-whitespace = whitespace
retained-whitespace = whitespace

whitespace = 1*( SP / HTAB )

SP   = U+0020  ; " " (Space)
HTAB = U+0009  ; "  " (Horizontal tab)


;; Newline

newline = LF / CR LF

LF = U+000A  ; "\n" (Line feed)
CR = U+000D  ; "\r" (Carriage return)


;; Element

instruction = trimmed-instruction / block-text

trimmed-instruction = [ignored-whitespace] instruction-body [ignored-whitespace]

instruction-body =  comment
instruction-body =/ fieldset-entry
instruction-body =/ name-instruction
instruction-body =/ line-continuation
instruction-body =/ list-item
instruction-body =/ block-instruction


;; Comment

comment = comment-operator [ ( [ignored-whitespace] value ) ]

comment-operator = GREATER-THAN-SIGN

GREATER-THAN-SIGN = U+003E  ; ">"


;; Fieldset entry

fieldset-entry = name [ignored-whitespace]
              fieldset-entry-operator [ignored-whitespace] value

fieldset-entry-operator = EQUALS-SIGN

EQUALS-SIGN = U+003D  ; "="


;; Name

name-instruction = name ( original-declaration / template-declaration )

original-declaration = [ignored-whitespace] name-operator [ ( [ignored-whitespace] value ) ]

template-declaration = ignored-whitespace template-instruction

name = escaped-name / unescaped-name

escaped-name = 1*BACKTICK [ignored-whitespace] required-token [ignored-whitespace] 1*BACKTICK  ; Note: The number of backticks at the start and end must be the same

unescaped-name = required-token

name-operator = COLON

BACKTICK = U+0060  ; "`"
COLON = U+003A     ; ":"


;; Line continuation

line-continuation = ( line-continuation-operator / newline-continuation-operator )
                    [ ( [ignored-whitespace] value ) ]

newline-continuation-operator = VERTICAL-BAR
line-continuation-operator = BACKSLASH

VERTICAL-BAR = U+007C  ; "|"
BACKSLASH    = U+005C  ; "\"


;; List item

list-item = list-item-operator [ignored-whitespace] value

list-item-operator = DASH

DASH = U+002D  ; "-"


;; Section

section = section-operator [ignored-whitespace] name [ignored-whitespace] [template-instruction]

section-operator = 1*HASH

HASH = U+0023


;; Token

optional-token = *non-eol
required-token = 1*non-eol

non-eol =  %x09
non-eol =/ %x20-10FFFF


;; Value

value = optional-token


;; Template

template-instruction = ( copy-operator / deep-copy-operator ) [ignored-whitespace] name

copy-operator = LESS-THAN-SIGN

deep-copy-operator = 2( LESS-THAN-SIGN )

LESS-THAN-SIGN = U+003C ; "<"


;; Block

block-instruction = block-operator [ignored-whitespace] name

block-operator = 2*DASH

block-text = [retained-whitespace] value
```
-- description

#### FAQ

-- description
See [FAQ](/eno/guide/faq/) in the [guide](/eno/guide/)
-- description
