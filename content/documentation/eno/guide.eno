title: guide

-- intro
# The complete guide to eno
-- intro

> TODO: Wrap into into first chapter always

# chapters

## Elements

-- description

-- description

### subchapters

#### Fields (:)

-- description
At its core eno lets us write down values, the simplest form being:

```eno
Current Temperature: Quite pleasant
```

With this we specify a pair of a key and a value, the key being "Current temperature" and the value being "Quite pleasant".

Some other examples:

```eno
Last Name: Schneider
Website: www.example.com
Profession: Freelance graphics artist
```

### No value

If we don't want to specify a value, we just leave it out.

```eno
More information:
```
-- description

#### Fieldsets (=)

-- description
```eno
color ratings:
green = 3
red = 4
blue = 1
```

Fieldsets allow us to group fields without the need to specify an entire section. They start like a field or list (with a key and a colon),
and go on as long as fieldset entries follow, which are differentiated from regular fields by their operator, an equals sign (`=`).
Just as in sections, any key can appear multiple times, but applications may choose to accept only unique keys when that behavior fits the usecase better.

Fieldsets can be copied (like everything else in eno), in which case you can actually redeclare an existing fieldset entry key,
which allows you to override its value in the copied fieldset:

```eno
image:
src = glass.jpg
title = A glass, half full.

image_2 < image
title = A glass, half empty.
```
-- description

#### Multiline Fields (--)

-- description
If we want to assign multiple lines to a key, we do it like this:

```eno
-- Long Description
The previous line marks a multiline field, whose content starts with this line.

Until the line that marks the begin of the multiline field appears a second time,
we can write any content we want, leave any number of lines empty ...

... and so on

With "--" we tell eno that we want to start a multiline field, and the text
right next to the two dashes on that same line again is the key (in this
case "Long Description") that provides a context to our multiline field.

Heads up now - in the next line the multiline field ends!
-- Long Description
```

If a line *inside* the mulitiline field looks exactly like the opening/ending line
of the field itself, it can be "escaped" by adding any number of additional dashes to
the `--` operator in *both* the opening *and* ending line:

```eno
--- My Field
-- My Field
--- My Field
```

Note that leaving no line at all between the opening and ending lines produces a field with the value `null`:

```eno
-- My Field
-- My Field
```
-- description

#### Lists (-)

-- description
If we want to assign multiple values to a key, it looks like this:

```eno
Shopping list:
- Bread
- Yoghurt
- Bananas (not too ripe)
```

An empty list looks like a regular empty value:

```eno
Shopping list:
```
-- description

#### Empty Elements (:)

-- description
If we don't want to specify a value, we just leave it out.

```eno
More information:
```
-- description

#### Sections (#)

-- description
Now let's group values in a section:

```eno
# Contact data

Telephone: +43 699 104734953
Email: anna.schneider@anna-schneider.de
```

This assigns all key-value pairs that follow after the begin of the section "Contact data" to that section. It is also possible to create any number of sub-sub-(and so on)-sections:

```eno
# Contact data

## Telephone numbers

### Anna

Landline: +43 1 0468648
Mobile: +43 699 104734953

### Uwe

Landline: +43 1 0468648
Mobile: +43 699 104734953complicated
```

To wrap up the introduction, here's an example that combines all of the possibilities explained above:

```eno
# Profile

Name: John Doe
Hair color: brown/gray
Age:
Hobbies:
- Fishing
- Horse-riding

-- Quote
I read the eno guide and everything made sense,
except this non-sensical example text here.
-- Quote

## Friends

False friends:

Close friends:
- Jane Doe
- Jean Doe

Casual acquaintances:
- John Dear
```
-- description

## Addendum

-- description
Complementary to the introduction to the elements, this section describes the remaining features of eno.
-- description

### subchapters

#### Comments (>)

-- description
Every line starting with `>` marks a comment line, in which any text may appear. The computer discards these lines when reading the file, so they are there for us to make notes and leave hints for others that might read the document.

```eno
> This is a comment!
```
-- description

#### Associated Comments (>)

-- description
An associated comment is just that:

```eno
> This comment is not associated with any element

> This is an associated comment; All consecutive lines immediately preceding any
> element get associated to that following element, think of this as the equivalent
> of documentation blocks inside code, only you don't need a separate parser afterwards
> to process it, because it's part of the standard language specification
field: value
```
-- description

#### `Copies (<)`

-- description
eno works very well for authoring content in multiple languages, imagine the following document layout for a blog post:

```eno
# English

title: FAQ
permalink: faq

-- text
Here you find answers to frequently asked questions:
...
-- text
```

If we just wanted to duplicate that page for another language, we can write the following line to do just that:

```eno
# German < English
```

This creates a section with the key "German" and copies everything that exists in the section "English" over to that new section.

As in this case "FAQ" is the same in german and english we only would need to replace the text, which we can do like this:

```eno
# German < English

-- text
Hier findest du Antworten auf oft gestellte Fragen:
...
-- text
```

By copying we get all fields from the english section, and by specifying a new `text` we are overwriting only that specific element, leaving the copied `title` and `permalink` intact.
-- description

#### Spaced line continuations (\)

-- description
When a value gets overly long, or you would like to split it into multiple lines for readability (e.g. for commandline flags or GET parameters) you can use line continuations:

```eno
A commandline poem: roses --are-red
\                         --violets are-blue
\                         --whitespace-is-ignored
``` 

With a backslash (`\`) you declare a *spaced line continuation*, whatever you write on
that line is appended to the end of the field before it, separated by a single
space. Note that like everywhere else in eno, whitespace plays no role, so this
is equivalent of the above example:

```eno
A commandline poem:
    \ roses --are-red
          \ --violets are-blue
          
      \ --whitespace-is-ignored
```
-- description

#### Direct line continuations (|)

-- description
With a vertical slash/pipe character (`|`) you declare a *direct line continuation*, whatever you write on that line
is also appened to the previous field, but directly and without any spacing inbetween:

```eno
A URL poem: https://roses.are.red/?violets=are-blue&
|                                  whitespace=does-not-matter
```

Final remark: *spaced* and *direct line continuations* can be mixed in any fashion:

```eno
command: hashify -i this-is-very-long-i-dont-even-know-when-this-key-is-
|                   going-to-end-therefore-i-am-happy-about-the-existence-
|                   of-direct-line-continuations
\                -o output.hashed
\                --verbose
```
-- description

#### `Deep copies (<<)`

-- description
Deep copying works like copying, except you use two angle brackets (`<<`) instead of one,
which in turn allows you to overwrite and/or add fields inside deeply nested section hierarchies.

```eno
# default
id:
## settings
hyperservice: disabled

# production << default
id: prod
## settings
ultraservice: enabled
```

In this example the resulting `# production` section will contain both `hyperservice` and `ultraservice`
inside its `## settings` subsection, whereas if you used only a regular copy operation (single `<`),
the `## settings` from `# default` would have been completely overwritten, deleting `hyperservice` and
leaving only `ultraservice`. A typical usecase for this feature are complex server configurations.
-- description

#### Escaping (`...`)

-- description
Let's assume someone wrote an eno document describing which clothing to wear at different temperatures:

```eno
30 degrees celsius: Swimming trunks
10 degrees celsius: Warm pullover and windjacket
`-10 degrees celsius`: A very warm coat
```

You'll notice that something is different in the third line: The `-10 degrees celsius` has been put between two backticks ( `` ` `` ).

Here's why:  
`-10 degrees celsius` starts with a `-`, and in eno every line starting with a `-` is interpreted as a *list item* as we learned before, therefore we need some way to say that we really mean "minus 10 degrees celsius" and not "10 degrees celsius" as an item in a list.

Here are some more examples of escaping in eno:

```eno
`https://eno-lang.org/`: The eno website
```
Every field in eno follows the pattern `key: value`, but in this case our key `https://eno-lang.org/` contains a `:` already, therefore we need to escape it.

```eno
`` `hypothetical` ``: The word "hypothetical" inside backticks
```
You might have wondered how an escape can be escaped, this is achieved by using two backticks around the key that is itself wrapped in (single) backticks, and leaving spaces so it does not look like three backticks. (these spaces on the outside are not included in the key though)
-- description

## Cheatsheet

-- description
The quick rundown on eno.

```eno
> Comment

> Associated Comment
Field: Value

-- Multiline Field
Value of ...
... Multiline Field
-- Multiline Field

--- Multiline Field
Value of ...
-- Multiline Field
... block
--- Multiline Field

List:
- Value
- Value

Fieldset:
Entry = Value
Entry = Value

Field: Value ...
\ ... Spaced Line Continuation

Field: Line ...
| ... Direct Line Continuation

Copied Field < Template Field

Extended Copied List < Template List
- Value
- Value

Modified Copied Fieldset < Template Fieldset
Key To Add Or Overwrite = Value

# Section
## Subsection
### Subsubsection
#### ...

# Copied Section < Template Section
# Copied Section With Deep-Merging << Template Section

`Escaped Field Key`: Value

`Escaped List Key`:
- Value
- Value

`Escaped Fieldset Key`:
`Escaped Entry` = Value
`Escaped Entry` = Value

`Escaped Copied Element Key` < Template Element

# `Escaped Copied Section Key` < Template Section
```
-- description

## FAQ

-- description 
# Frequently answered questions

## How can I express a value with leading/trailing or only whitespace?

Use a multiline field - a multiline field's value is retained verbatim, all newlines and whitespace are conserved:

```eno
-- my_block

  my content  

-- my_block
```

In the rare case where a document needs to contain a high number of single-line
values that include leading/trailing or even only whitespace you can also
consider using a custom type syntax and loader to better express this concept in
your application, for instance:

```eno
> In our eno documents we use our own custom type syntax for
> expressing a whitespace-only value (in this example 3 spaces)

my_value: "   "
```

```js
// In our application code we define and utilize a
// reusable loader for loading our own custom type
enolib.register({ whitespace: value => value.replace(/^"|"$/, '') });

// ...

document.field('my_value').requiredWhitespaceValue();  // returns '   '
```

## Can a key include leading/trailing or only whitespace?

This works similar to the example previously given for values:

```eno
> In our eno documents we use our own custom type syntax for
> expressing a whitespace-only key (in this example 3 spaces)

"   ": tough readbility
```

```js
// In our application code we define and utilize a
// reusable loader for loading our own custom type
enolib.register({ whitespace: value => value.replace(/^"|"$/, '') });

// ...

const myValue = document.element().whitespaceKey();  // returns '   '
```

Note that using eno's escaping does not allow you to express leading/trailing or
purely whitespace, the outer spacing in an escape sequence allows to
express an ambiguous case of *escaping an escape sequence* but is always
trimmed away:

```eno
`` my_name ``: my value 
`` `my_name` ``: my value 
```

Here the resulting key is `'my_name'` in the first and ``'`my_name`'`` in the second example.
-- description
