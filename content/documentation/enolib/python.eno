title: python

-- intro
> You can contribute to this documentation by editing [python.eno](https://github.com/eno-lang/eno-lang.org/blob/master/content/documentation/enolib/python.eno) and submitting a Pull Request!

## Installation

```shell
pip install enolib
```

## Getting started

A minimal example to read an eno document directly from a string with `enolib`:

```python
>>> import enolib
>>> document = enolib.parse('Greeting: Hello World!')
>>> document.field('Greeting').required_string_value()
'Hello World!'
```

## Links

Package on PyPI - <https://pypi.org/project/enolib/>  
Repository on GitHub - <https://github.com/eno-lang/enolib/> 
-- intro

# chapters

## Parsing a document

-- description
```python
>>> import enolib
>>> with open('intro.eno', 'r') as file:
...   input = file.read()
>>> document = enolib.parse(input)
```
-- description

### subchapters

#### Providing the source

-- description
enolib does not know where your content comes from (which file, input
field, url, etc.), this is however a vital piece of information for good error
messages, and so it is highly recommended to provide a `source` string which
enolib includes in all error messages it creates:

```python
>>> document = enolib.parse(input, source='a/path/example.eno')
```
-- description

#### Localized errors

-- description
enolib's messages are fully localized, this is how you provide a different locale:

```python
>>> import enolib
>>> from enolib.locales import es
>>> document = enolib.parse('field: value', locale=es)
```

The currently available locales are `de`, `en` and `es`, you are very
welcome to contribute additional locales at <https://github.com/eno-lang/enolib/tree/master/locales>.
It's a fairly simple process but you can also get in touch directly via mail to request the strings
that need translation and send them back if you'd rather not deal with the technicalities.
-- description

#### Error formats

-- description
By default enolib produces nicely formatted plaintext error messages,
but if you're in a terminal environment you can also get awesome colored
and syntax highlighted error messages, or even full-fledged HTML if you're
deploying enolib with a browser application:

```python
>>> import enolib
>>> from enolib import HtmlReporter, TerminalReporter
>>> document = enolib.parse('field: value', reporter=TerminalReporter) # or HtmlReporter 
```
-- description

#### Cursor lookup

-- description
When you regularly parse a document you enter at the root document level, there
is however also the possibility to parse the document and lookup a
one-dimensional index or a line and column in the document, which means you enter
the document at whichever element is at that location. This can be used for autocomplete
providers in an IDE or text editor, or other rich eno document inspection usecases.

```python
>>> import enolib
>>> lookup = enolib.lookup('field: value', index=3) # "what is at string offset 3?"
{
  'element': <class Element key=field>
  'range': 'key'
}
>>> lookup = enolib.lookup('field: value', index=5) # "what is at string offset 5?"
{
  'element': <class Element key=field>
  'range': 'element_operator'
}
>>> lookup = enolib.lookup('field: value', line=0, column=10) # "what is at line 0, column 10?"
{
  'element': <class Element key=field>
  'range': 'value'
}
```

Note that the element returned as a lookup property is of variable type,
therefore you need to use the methods described in [Dynamic
layouts](/enolib/python/querying-elements/dynamic-layouts/) to further query
the document from this entry point.

As you don't enter at the root you can also use `.parent()` to navigate up the hierarchy.
-- description

## Querying content

-- description
In eno content comes in the form of *values*, *keys* and *comments* and can be
fetched in the default *string* type, a predefined type (e.g. those provided
by [enotype](/enotype/)) or a custom type which we define ourselves.
-- description

### subchapters

#### Field values

-- description
When you query a value you always specify whether that value is optional or
required:

```python
>>> document.field('default_settings').required_string_value()
>>> document.field('extra_settings').optional_string_value()
```

The `optional_*` query returns a value or `None`, while the `required_*` query
raises a validation error if the value is missing, such as:

```error
The field 'default_settings' must contain a value.

   Line | Content
 >    1 | default_settings:
```

## Fieldset entry values

This works just like on a field:

```python
>>> document.fieldset('image').entry('src').required_string_value()
>>> document.fieldset('image').entry('title').optional_string_value()
```
-- description


#### List values

-- description
You can either directly query them from the list, or take the more verbose route through the items:

```python
>>> document.list('shopping_list').required_string_values() # Note the plural here
>>> [item.required_string_value() for item in document.list('shopping_list').items()]
```

An important gotcha here is that in the shortcut version *required string
values* does not mean there have to be items in the list, but only that items
need to have a value. If you look at the non-shortcut version this is obvious,
but for the shortcut version it's important to keep in mind.

The `optional_*` variant of this accessor produces the less commonly needed list that might contain
`None` values:

```python
>>> document.list('list_with_empty_spacer_items').optional_string_values()
```
-- description

#### Keys and Comments

-- description

## Querying keys

All elements have a key (list items return the key of the list) therefore you don't need to specify
optional/required here:

```python
>>> document.elements()[0].string_key()
>>> document.fieldset('image').entries()[0].string_key()
```

## Querying comments

All elements can have an associated comment and like with values you specify whether it's optional or required:

```python
>>> document.field('author').required_string_comment()
>>> document.fieldset('image').optional_string_comment()
```
-- description

#### Predefined Types

-- description
Predefined types are not shipped with enolib - they are provided as
separate packages, for instance [enotype](/enotype/).

There are two ways to use
them:

## Registering types globally

This is the preferred approach when you re-use types a lot - when you register a type it is made available through the native API.

```python
import enolib
from enotype import boolean, color

enolib.register(boolean, color)

document = enolib.parse('#b5b5b5: yes')

document.field('#b5b5b5').boolean_key() # raises "A boolean is required - allowed values are 'true', 'false', 'yes' and 'no'."
document.field('#b5b5b5').color_key() # returns '#b5b5b5'
document.field('#b5b5b5').required_boolean_value() # returns true
document.field('#b5b5b5').required_color_value() # raises "A color is required, for instance '#B6D918', '#fff' or '#01b'."
```

In this approach you take any of the content query methods in enolib and replace `string`
with a type you have registered.

## Supplying types with queries

This is essentially what's happening above as well, only under the hood. We'll
see why this approach is sometimes preferable on the next page, when we define
our own custom types.

```python
import enolib
from enotype import boolean, color

document = enolib.parse('#b5b5b5: yes')

document.field('#b5b5b5').key(boolean) # raises "A boolean is required - allowed values are 'true', 'false', 'yes' and 'no'."
document.field('#b5b5b5').key(color) # returns '#b5b5b5'
document.field('#b5b5b5').required_value(boolean) # returns true
document.field('#b5b5b5').required_value(color) # raises "A color is required, for instance '#B6D918', '#fff' or '#01b'."
```

In this approach you remove `string` from any content query method and pass the type as a parameter instead.
-- description

#### Custom Types

-- description
The predefined types we've seen before are actually just simple functions, here
is for instance the definition of enotype's `color` type:

```python
import re

COLOR_RE = re.compile(r'^\s*#[0-9a-f]{3}([0-9a-f]{3})?\s*$', re.IGNORECASE)

def color(value):
  if not COLOR_RE.match(value):
    raise ValueError('A color is required, for instance \'#B6D918\', \'#fff\' or \'#01b\'.')

  return value
```

So as we see, all that's required for a custom type definition is a function
that takes a single parameter - the value - and returns something!

Additionally, depending on the type, we might also include validation as
demonstrated above - we simply raise a string message if there is a problem.
When that happens the  message is intercepted by enolib and embedded within a
rich error message with metadata and a code snippet from the document.

```python
import enolib

extra_foo = lambda value: value + ' with extra foo!'

document = enolib.parse('foo: bar')

document.field('foo').required_value(extra_foo)  # returns 'bar with extra foo!'
```

And just like that we are using our own type. Here's another example using the
global registering magic from the previous chapter:

```python
import enolib

def foo_only(value):
  if value != 'foo':
    raise ValueError('Only foo is accepted!')
  
  return value

enolib.register(foo_only)

document = enolib.parse('foo: bar')

document.field('foo').foo_only_key()  # returns 'foo'
document.field('foo').required_foo_only_value()  # raises "Only foo is accepted!" with a code snippet
```

As a final note why it is sometimes preferable to use the less magicky
function parameter type passing: On the one hand you might dynamically construct
a type loader multiple times in your application when it depends on some local
state (closure). On the other hand your type might not be a type per se but more of
a conversion or modification, something like `replace_newlines` or `render_markdown`,
and in that case `.required_value(render_markdown)` looks a bit more sensible than
`.required_render_markdown_value()`.
-- description

## Querying elements

-- description
In a static query we know what element type we expect (for instance a
field), where we expect it (for instance at the document root) and what
key that element has (for instance 'author'):

```python
document.field('author')
```

All element types that exist in eno can be queried in that same way:

```python
document.field('author')
document.list('files')
document.list('files').items()
document.fieldset('image')
document.fieldset('image').entry('src')
document.section('content')
# etc.
```

The document itself is a section (only without a key), and all queries you can
perform on a document you can perform on a section as well:

```python
document.section('content').field('title')
document.section('content').section('translated').section('dutch').list('tags')
```

When you expect multiple elements you just use the plural:

```python
document.fields('author')
document.lists('files')
document.fieldsets('image')
document.sections('content')
```
-- description

### subchapters

#### Optional/required

-- description
Unlike with querying values you *can, but don't need to* specify whether elements
queried from the document are optional or required. As you will most often use
the elements' values themselves, the necessity for the element hierarchy in between
the document and that value is automatically inferred by whether the value itself
is optional or required:

```python
document.section('content').section('translated').field('revision').optional_string_value()
```

The line above can be run for an entirely empty document and still return `None`, while by
modifying the query of the value itself to be required would make the code raise an error for
the first element missing in that hierarchy instead (again assuming an empty document):

```python
document.section('content').section('translated').field('revision').required_string_value()
```

This would produce an error:

```error
The section 'content' is missing - in case it has been specified look for typos and also check for correct capitalization.

   Line | Content
 *    1 | 
```

With that said, there will of course also be cases where you want to be explicit
about whether an element is optional or required, for this you can use the
explicit `optional_*` or `required_*` accessor variant, which exists for all
element types, for instance:

```python
document.required_field('author')
document.optional_section('notes')
```

As with value accessors, the `optional_*` variants return `None` if the element
does not exist (be aware that you should not chain further queries after such a
call because you'd potentially be calling a function on `None`), while the `required_*`
variants immediately raise an error when the element is missing (here you can safely chain further queries afterwards).

Below is a pattern you might find useful, it's basically saying "There always has to
be a field with the key 'author', but it can be empty". It returns `None` or the value,
and only raises an error when the field itself is missing.

```python
document.required_field('author').optional_string_value()
```

The pattern below is sort of the reverse, it's "If there is a field with the key
'author', it also requires a value", and guarantees there is a value if there is
also a field, otherwise an error is raised.

```python
author = document.optional_field('author')

if author:
  value = author.required_string_value()
  # ...
```

Last but not least a pattern that does not work:

```python
author = document.field('author')

if author:
  # Will always enter here, author is never None
```

As shown earlier you can safely and deeply query a non-existing document
hierarchy. This is possible because the standard query methods return proxy
objects (e.g. `MissingSection`) instead of `None` when an element in the chain
is missing, and with that it's clear why the previous example does not work,
instead you have to use the explicit `optional_field` accessor to ensure you are
being returned `None` if there is no element.

```python
author = document.optional_field('author')

if author:
  # This works, author can be None now
```

-- description

#### Dynamic layouts

> TODO: element, items, entries
-- description
In markup oriented eno usecases we often deal with sections that contain
dynamic layouts of content, meaning the quantity, order and type of elements
is variable and we can not just statically query everything by key but instead
we iterate and respond to what we find dynamically.

```python
for element in document.elements():
  if element.string_key() == 'foo':
    # ...
```

The `elements` accessor returns the ordered elements of a section as a list.
As every element can be asked for a key, we can safely use this to determine
further actions on an element.

```python
for element in document.elements():
  if element.yields_field():
    value = element.to_field().required_string_value()  
    # ...
  elif element.yields_list():
    # ...
```

Not every element we encounter in a section has a value (fieldsets, lists and
sections don't), therefore we use the `yields_\[element_type]()` methods to check for a
specific element type before we make any queries that require e.g. a field when
we expect different types.


-- description

#### Requiring all elements

-- description
Often we want to ensure that eno documents authored by users always contain all
of the fields that can be specified according to our schema, regardless of
whether they are actually used or left empty, because the simple fact that they
see the field in the document they are authoring informs them that it exists and
can be used, whereas if it were entirely missing in the document, only external
documentation can point the user to the possiblity to define that specific field.

To easily enable such behavior there is a shortcut that saves us from writing out 
`required` in front of every element we query from the document:

```python
document.all_elements_required()
document.field('name').optional_string_value()
```

Here the field `name` always has to be present, no matter if it's empty or not.

Note that this can be called not only on the document but also on any section or fieldset:

```python
details = document.section('details')

details.all_elements_required()
```

Any element queries on `details` from that point on always require the elements to be there,
including the ones in subsections and fieldsets, recursively.

Lastly, this setting can also be reverted again by explicitly passing `False`:

```python
document.all_elements_required()
document.all_elements_required(False)
document.field('name').optional_string_value()
```

Here the field `name` is optional, just as its value.
-- description


## Touching elements

-- description
Every element in the document that you query something from is automatically
flagged as *touched*. When you are finished querying the document (or a specific
section) you can let enolib run a check to ensure that every element found in
the document was actually touched by your code.

Using this even at an early stage in developing an application is a great
productivity booster because it will save you when you forget to query
something, or when you *did* write a query for an element but *mis-typed* its
key, or when you or a user mis-types keys in the data itself, and so on.

Basically it's like an extra automated test suite for both your code and the
data itself that you can use for free.
-- description

### subchapters

#### Assert all touched

> TODO: only, except

-- description
Call `assert_all_touched()` on a document, section or fieldset to ensure that no
data has been left untouched by your application.

```python
document = enolib.parse('importan_option: no_delete')  # Note the mis-typed key

important_option = document.field('important_option').optional_string_value()

document.assert_all_touched()
```

When you run this code an error will be raised in the last line:

```error
This element was not expected, make sure it is at the right place in the document and that its key is not mis-typed.

   Line | Content
 >    1 | importan_option: no_delete
```
-- description

#### Manual touching

-- description
Sometimes you intentionally don't process elements or entire sections in the
document. You can manually touch them so they and all elements below are marked
as touched and don't get reported by enolib when you run your final checks at
the end of the program.

```python
document = enolib.parse('field: value')

document.field('field').touch()

document.assert_all_touched()
```

No error is raised this time.
-- description

## Error Metadata

-- description
enolib's errors provide rich textual and numerical information to applications:

- The error message itself (usually a single line of text, by default in english, but a different locale can be passed when parsing the document too)
- An excerpt snippet of the document, highlighting the line(s) where the issue occurred (by default this snippet is plaintext, but HTML or colored terminal text formatting are available by passing a different reporter when parsing the document)
- A suggested cursor location in the document at which to start with manual error corrections - applications can use this to automatically guide/take the user to the right place in the document (the cursor position is provided both as a one-dimensional string index, as well as a line/column combination)
- A suggested selection range in the document at which the user might want to start fixing the error - same purpose and indexing as the cursor location
-- description

### subchapters

#### Message 

-- description
Contains both the error text as well as the snippet. This is also what you get in the console when you don't catch the error.

```python
>>> try:
...   # ...
... except Error as e:
...   return e.message
"In line 4 'a' is copied into itself.\n\n   Line | Content\n ..."
```
-- description

#### Text 

-- description
Returns a one-liner that describes the error in human language.

```python
>>> try:
...   # ...
... except Error as e:
...   return e.message
"In line 4 'a' is copied into itself."
```
-- description

#### Snippet 

-- description
Returns a formatted excerpt of those passage(s) from the input where the error occurred.

```python
>>> try:
...   # ...
... except Error as e:
...   return e.snippet
   Line | Content
      1 | 
 *    2 |     # a
 *    3 |     ## b
 >    4 |     ### c < a
      5 |
```
-- description

#### Cursor 

-- description
Returns a cursor position object indicating where a cursor should be placed if
an application wants to offer the user a way to move the cursor straight to the
error location.

```python
>>> try:
...   # ...
... except Error as e:
...   return e.cursor
{ 'index': 56, 'line': 3, 'column': 14 }
```
-- description

#### Selection 

-- description
Returns a selection range object indicating what text area to select if an
application wants to offer the user a way to select the parts in a document
affected by the error.

```python
>>> try:
...   # ...
... except Error as e:
...   return e.selection
{
  'from': { 'index': 56, 'line': 3, 'column': 14 },
  'to': { 'index': 78, 'line': 3, 'column': 32 }
}
```
-- description

## Addendum

-- description
Some varied extra content.
-- description

### subchapters

#### A complete example

-- description
This complete example is an extensive showcase of enolib, demonstrating that
parsing eno, although more verbose than other formats, has much to offer:

- Decoupling of the field names the user prefers/understands from the ones a developer wants to use in the code
- Out of the box localized parser and validation errors that can be directly displayed to a non-technical user
- Out of the box validation of predefined high-level types (comma_separated, datetime, email, slug and url here)
- Native API integration of completely custom types (markdown here)
- Guaranteed data integrity, including prevention of unhandled extra fields

```python
import enolib
import markdown as python_markdown
from enolib.locales import de
from enotype import comma_separated, datetime, email, slug, url

def markdown(value):
  return python_markdown.markdown(value)

# Makes the .required_xxx_value() and .optional_xxx_value() methods available below
enolib.register(comma_separated, datetime, email, markdown, slug, url)

def read_post(filename):
  with open(filename, 'r') as file:
    input = file.read()

  document = enolib.parse(input, locale=de, source=filename)
  
  author = document.fieldset('Verfasser')
  post = {
    'author': {
      'name': author.entry('Name').required_string_value(),
      'email': author.entry('Email').optional_email_value(),
      'website': author.entry('Website').optional_url_value()
    },
    'title': document.field('Titel').required_string_value(),
    'date': document.field('Veröffentlicht').required_datetime_value(),
    'permalink': document.field('Permalink').required_slug_value(),
    'abstract': document.field('Abstract').optional_markdown_value(),
    'body': document.field('Text').required_markdown_value(),
    'tags': document.field('Tags').required_comma_separated_values()
  }

  # Throws an error when there are unhandled, mis-typed or unneeded fields in the document
  document.assert_all_touched()
  
  return post

read_post('my_post.eno')
```
-- description

#### AST inspection

-- description
You can call `raw()` on a document or any element in it to get a native python
object serialization of the abstract syntax tree constructed by enolib.

```python
>>> enolib.parse('> note\ngreeting: hello').raw()
{
  'type': 'document',
  'elements': [{
    'comment': 'note',
    'key': 'greeting',
    'type': 'field',
    'value': 'hello'
  }]
}
```

Although this can theoretically be used to get a plain object dump of an eno
document, it is solely intended for debugging purposes, as there is no
validation and no types and the serialization structure is rather verbose to
work with as well.
-- description

#### FAQ

-- description
## Is it possible to deserialize an eno file directly into a Python object?

Given that eno notation itself has no knowledge of types there is no way to
automatically serialize values to anything other than `string` type. Given
that eno documents and elements can flexibly represent both associative and
sequential data structures, there is also no canonical serialization
structure that offers an optimal data layout for both usecases.

So indeed one has to manually deserialize the document! The reward for this however is
100% reliable input data, all the types one can imagine and a lot less syntax
and overhead when writing content. Considering that the code for reading and
validating a document only needs to be written *once*, while the actual authoring
and editing of documents can happen up to *many million times* depending on the
userbase of an application, spending a few minutes on the validation code is
probably the better tradeoff to make?

Lastly, the enolib API does in fact also offer a way to deserialize a document
to a native Python object, which however is only meant for debugging purposes.
It is described in the previous chapter: [AST Inspection](/enolib/python/addendum/ast-inspection/).
-- description
