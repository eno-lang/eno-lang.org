# Demo 01: Hello World

-- eno
Greeting: Hello World
-- eno

-- javascript
// This demo simply reads in a single (required) field from the document.
// Remove or rename the field to see the error output enolib produces!

const options = {
  locale: de,
  reporter: HtmlReporter
};

const doc = enolib.parse(input, options);

return doc.field('Greeting').requiredStringValue();
-- javascript

-- python
# EMULATED MODE - CODE IS READ-ONLY
#
# This demo simply reads in a single (required) field from the document.
# Remove or rename the field to see the error output enolib produces!

doc = enolib.parse(input,
                   locale=enolib.locales.de,
                   reporter=enolib.HtmlReporter)

return doc.field('Greeting').required_string_value()
-- python

-- ruby
# EMULATED MODE - CODE IS READ-ONLY
#
# This demo simply reads in a single (required) field from the document.
# Remove or rename the field to see the error output enolib produces!

doc = enolib.parse(
  input,
  locale: Enolib::Locales::De,
  reporter: Enolib::HtmlReporter
)

return doc.field('Greeting').required_string_value
-- ruby

# Demo 02: Sections and Fields

-- eno
# City

Name: Vienna
Continent: Europe
-- eno

-- javascript
// This demo reads in two fields located within a section

const doc = enolib.parse(input, { reporter: HtmlReporter });

const city = doc.section('City');

const name = city.field('Name').requiredStringValue();
const continent = city.field('Continent').requiredStringValue();

return `The city ${name} is in ${continent}`;
-- javascript

-- python
# EMULATED MODE - CODE IS READ-ONLY
#
# This demo reads in two fields located within a section

doc = enolib.parse(input, reporter=enolib.HtmlReporter)

city = doc.section('City')

name = city.field('Name').required_string_value()
continent = city.field('Continent').required_string_value()

return f"The city {name} is in {continent}"
-- python

-- ruby
# EMULATED MODE - CODE IS READ-ONLY
#
# This demo reads in two fields located within a section

doc = Enolib.parse(input, reporter: Enolib::HtmlReporter)

city = doc.section('City')

name = city.field('Name').required_string_value
continent = city.field('Continent').required_string_value

return "The city #{name} is in #{continent}"
-- ruby

# Demo 03: Loading a custom lat/lng type

-- eno
route_coordinates:
- 48.205870, 16.413690
- 48.219513, 16.405041
- 48.229600, 16.371639
- 48.225857, 16.355580
- 48.220560, 16.364078
- 48.211004, 16.356364
-- eno

-- javascript
// This demo reads in coordinates by passing the items of a list
// through a custom loader that validates and transforms the input.

const latLngLoader = value => {
  const match = /^(\d+\.\d+),\s*(\d+\.\d+)$/.exec(value);

  if(match) {
    return { lat: parseFloat(match[1]), lng: parseFloat(match[2]) };
  }

  throw 'Coordinates must be formatted xx.xxxxxx, xx.xxxxxx';
};

const doc = enolib.parse(input, { reporter: HtmlReporter });

return doc.list('route_coordinates').requiredValues(latLngLoader);
-- javascript

-- python
# EMULATED MODE - CODE IS READ-ONLY
#
# This demo reads in coordinates by passing the items of a list
# through a custom loader that validates and transforms the input.

import re

def lat_lng_loader(name, value):
  match = re.search('^(\d+\.\d+),\s*(\d+\.\d+)$', value)
  if not match:
    raise ValueError('Coordinates must be formatted xx.xxxxxx, xx.xxxxxx')
  return { 'lat': float(match.group(1)), 'lng': float(match.group(2)) }

doc = enolib.parse(input, reporter=enolib.HtmlReporter)

return doc.list('route_coordinates').required_values(lat_lng_loader)
-- python

-- ruby
# EMULATED MODE - CODE IS READ-ONLY
#
# This demo reads in coordinates by passing the items of a list
# through a custom loader that validates and transforms the input.

lat_lng_loader = proc do |name, value|
  match = value.match(/^(\d+\.\d+),\s*(\d+\.\d+)$/)
  raise 'Coordinates must be formatted xx.xxxxxx, xx.xxxxxx' unless match
  
  { lat: match[1].to_f, lng: match[2].to_f }
end

doc = Enolib.parse(input, reporter: Enolib::HtmlReporter)

return doc.list('route_coordinates').required_values(lat_lng_loader)
-- ruby

# Demo 04: Looking up elements in the document by line/column

-- eno
# Le Demo

Un saludo en español: Hola
A greeting in english: Hello

## Films

魔女の宅急便:
Rating = 5 Stars

Los amantes del círculo polar:
Rating = ⭐⭐⭐⭐⭐   
-- eno

-- javascript
// This demo shows how to look up things in the source document by (for instance) cursor position.
// 
// In this example the 'cursor' variable is provided by the demo
// and contains the numerical index of the cursor inside the textarea
// Click/move/type around in the eno textbox to update the result!
const result = enolib.lookup({ index: cursor }, input, { reporter: HtmlReporter });

return `
  Cursor index #${cursor}
  range: ${result.range}
  element: ${result.element.stringKey()}
`.trim();
-- javascript

-- python
# EMULATED MODE - CODE IS READ-ONLY
#
# This demo shows how to look up things in the source document by (for instance) cursor position.
#
# In this example the 'cursor' variable is provided by the demo
# to contain the numerical index of the cursor inside the textarea
# Click/move/type around in the eno textbox to update the result!
result = enolib.lookup(input, index=cursor, reporter=enolib.HtmlReporter)

return f"""
  Cursor index #{cursor}
  range: {result['range']}
  element: {result['element'].string_key()}
"""
-- python

-- ruby
# EMULATED MODE - CODE IS READ-ONLY
#
# This demo shows how to look up things in the source document by (for instance) cursor position.
#
# In this example the 'cursor' variable is provided by the demo
# to contain the numerical index of the cursor inside the textarea
# Click/move/type around in the eno textbox to update the result!
result = Enolib.lookup(input, index: cursor, reporter: Enolib::HtmlReporter)

return <<~DOC
  Cursor index ##{cursor}
  range: #{result[:range]}
  element: #{result[:element].string_key}
DOC
-- ruby
