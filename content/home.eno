> TODO: Turn the eno snippet into a carousel-style whirlwind tour / teaser video that showcases all landmark features

-- markdown
# Eno <span class="light">· A Data Language For Everyone</span>

```eno
author: Jane Doe
email: jane@eno-lang.org

-- my_content
Multi-line embedded content (e.g. markdown) here ...
-- my_content

states:
active = #fff
hover = #b6b6b6

# cities
Den Haag: 52.069961, 4.302315
Málaga: 36.721447, -4.421291
서울특별시: 37.566984, 126.977041

# cities expanded < cities
Springfield: 38.790312, -77.186418
```

Eno is a data language for all people, not just developers. Its simple syntax and
versatile nature welcomes a wide audience, both in regards to cultural background
as well as technical ability. Unlike traditional developer- and machine-centric
data languages, its type-agnostic design embraces our human superpower - our
effortless understanding of context - and thereby makes it one of the easiest
data languages to grasp and author content in.

<!-- - [Reference Parser](https://codeberg.org/simonrepp/libeno/) - A new reference parser for Eno. -->

- [Guide](/guide/) - The entire language explained in just a few minutes.
- [Playground](/playground/) - Example documents you can interactively modify and study.
- [Specification](/specification/) - Encoding, extension, MIME type and implementation details.


<a name="plugins"></a>
# Plugins <span class="light">· Highlighting And Extras</span>

- [Ace](https://github.com/eno-lang/ace-eno/) - Mode and highlight rules, ready-to-use custom build (optionally via npm)
- [Atom](https://atom.io/packages/language-eno) - Syntax highlighting, embedded language support, whitespace protection
- [Prism](https://github.com/eno-lang/prism-eno/) - Language grammar definition, custom color schemes (dark/light)
- [Sublime Text](https://packagecontrol.io/packages/eno) - Syntax highlighting, customizations for the default color themes
- [Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=eno-lang.vscode-eno) - Syntax highlighting


<a name="libraries"></a>
# Libraries <span class="light">· Application Development</span>

- [C](https://codeberg.org/simonrepp/libeno/) - Official upcoming new reference parser *libeno*, in development
- [C++](https://github.com/eno-lang/tree-sitter-eno/) - Official *tree-sitter-eno* parser, usable with bindings
- [Haskell](https://github.com/eno-lang/tree-sitter-eno/) - Official *tree-sitter-eno* parser, usable with bindings
- [Java](https://github.com/Nzen/Enohar/) - Third party *Enohar* library for parsing and emitting documents (incomplete)
- [JavaScript](/javascript/) - Official *enolib* library, the current reference parser
- [PHP](/php/) - Official *enophp* library (for an older specification, simple documents are compatible)
- [Python](/python/) - Official *enolib* library
- [Ruby](/ruby/) - Official *enolib* library
- [Rust](https://github.com/eno-lang/tree-sitter-eno/) - Official *tree-sitter-eno* parser, usable with bindings
- [Tcl](https://github.com/bef/enotcl/) - Third party *enotcl* parser (incomplete)
- [WebAssembly](https://github.com/eno-lang/tree-sitter-eno/) - Official *tree-sitter-eno* parser, usable with bindings


# Libraries Addendum <span class="light">· Benchmarks, Playground, Types</span>

- [Benchmarks](https://github.com/eno-lang/benchmarks/) - *Enolib* is **fast** - multi-language comparison with toml and yaml parsers
- [Enolib Playground](/enolib-playground/) - Interactive playground for *enolib* - javascript and emulated python/ruby examples
- [Enotype](https://github.com/eno-lang/enotype/) - Multi-language implementations of common types for use with *enolib*

<a name="about"></a>
# History <span class="light">· The Journey So Far</span>

The first draft for what is now known as *Eno* was sketched out in early
2018 during R&D on a large publishing project around file-based content.  It was
designed and developed by [Simon Repp](https://simonrepp.com/), and still is to
this day. Many contributions were made by people who have offered their
cultural, technical and personal insight, reported bugs and submitted code and
corrections and set out to develop their own libraries for Eno - I'd
like to hereby express my gratitude to you, thanks for your support!


# Present And Future <span class="light">· The Road Ahead</span>

Since mid-2020 a big effort is made to enable usage of Eno with compiled
languages (C/C++, Go, Rust, et al). The development of the [new C-based
reference parser](https://codeberg.org/simonrepp/libeno/) which is the core part
of this effort also serves as a vehicle for clearly specifying and thereby
resolving the last remaining ambiguities in the specification.

Building on top of the new reference parser, work on a cross-platform parsing
code generator is planned for the near-ish future, enabling developers to obtain
fully functional data serialization code for multiple languages based on a
schema language that is to be defined in the process.

The mid and long term vision is to endeavour for standardization of Eno either
through the institutional route or by establishing a de-facto standard through
sufficient adoption in a few key projects or products. If you sympathize with
this vision, join in to help make it happen!

For the latest developments you can read the [blog](/blog/), to which you can also [subscribe via RSS](/feed.rss).


# Contact <span class="light">· Issues And Questions</span>

For concrete technical issues or questions feel free to open issues in the
respective repositories. To get in touch directly, write a mail
to <simon@fdpl.io> or reach out through the fediverse at
[@freebliss@post.lurk.org](https://post.lurk.org/@freebliss).
-- markdown
