title: The eno notation language and libraries

# content

> TODO: Turn the eno snippet into a carousel-style whirlwind tour / teaser video that showcases all landmark features
-- markdown
# The eno notation language

LAST_UPDATE

```eno
author: Jane Doe
email: jane@eno-lang.org

-- my_content
Multi-line embedded content (e.g. markdown) here ...
-- my_content

states:
active = #fff
hover = #b6b6b6

# cities
Den Haag: 52.069961, 4.302315
Málaga: 36.721447, -4.421291
서울특별시: 37.566984, 126.977041

# cities expanded < cities
Springfield: 38.790312, -77.186418
```

eno is a structured, plain-text notation language, related in many ways to its
ancestors and relatives JSON, YAML, TOML, ArchieML, StrictYAML, and others.
Through its simple syntax and versatile nature it targets a wide audience, both
in regards to cultural background as well as technical ability. As a modern
foundational technology for file-based content it enables highly productive and
reliable application development, and the possibility to create file-based
content applications for a wider and more diverse user audience than was
previously possible.

- [Guide](/guide/) — The entire language explained in just a few minutes.
- [Playground](/playground/) — Example documents you can interactively modify and study.
- [Specification](/specification/) — Encoding, extension, MIME type and implementation details.

# IDE/Editor Plugins

- [Ace](/plugins/ace/)
- [Atom](/plugins/atom/)
- [Prism](/plugins/prism/)
- [Sublime Text](/plugins/sublime/)
- [Visual Studio Code](/plugins/vscode/)
-- markdown

## poster

title: enolib
tagline: The cross-language eno standard library.

platform:
label = JavaScript Implementation
logo = /logos/javascript.svg
url = /enolib/

platform:
label = Python Implementation
logo = /logos/python.svg
url = /enolib/

platform:
label = Ruby Implementation
logo = /logos/ruby.svg
url = /enolib/

-- javascript
import enolib from 'enolib';

const document = enolib.parse(`
  author: Jane Doe
  title:
`);

document.field('author').requiredStringValue();
  // returns 'Jane Doe'
  
document.field('title').requiredStringValue();
  // throws "The field 'title' must contain a value.
  //
  //   Line | Content
  //      1 | author: Jane Doe
  // >    2 | title:
  //
-- javascript

-- description
Overview:
- Dynamically extensible query API for custom and third party type support
- Cursor lookup API (by index or line/column) for easy authoring of rich IDE plugins
- Querying equals validating - guaranteed data structure and type-safety
- Fully localized, handwritten, team-friendly error messages
- Rich error metadata: message, document snippet, cursor position, selection range

Usecases:
- Static site generation, scalable up to massive amounts of content
- Generating documentation, code, reports, invoices, CVs, you name it
- Highly reliable application configuration data with minimal development effort
- Content management tooling for apps, websites, editors, IDEs, ...

[More about enolib](/enolib/)
-- description

## poster

title: enotype
tagline: Functional type implementations for use with (or without) enolib.

platform:
label = npm Package
logo = /logos/javascript.svg
url = https://www.npmjs.com/package/enotype

platform:
label = Python Package
logo = /logos/python.svg
url = https://pypi.org/project/enotype/

platform:
label = Ruby Gem
logo = /logos/ruby.svg
url = https://rubygems.org/gems/enotype

platform:
label = PHP Implementation
logo = /logos/php.svg
url = https://github.com/eno-lang/enotype/tree/master/php

-- javascript
import { latLng } from 'enotype';

latLng('36.721447, -4.421291');
  // returns { lat: 36.721447, lng: -4.421291 } 

enolib.register({ latLng });

document.section('cities').field('Málaga').requiredLatLngValue();
  // returns { lat: 36.721447, lng: -4.421291 }
-- javascript

-- description
enotype is a collection of functions that convert unsafe `string` input to safe, native types. It is the standard type library for [enolib](/enolib/) but can be utilized in a multitude of other contexts as well.

[More about enotype](/enotype/)
-- description

## poster

tagline: tree-sitter parser, PHP, Tcl & Java libraries, legacy resources
title: and more

platform:
label = tree-sitter-eno (C parser for eno using tree-sitter)
logo = /logos/c.svg
url = https://github.com/eno-lang/tree-sitter-eno

platform:
label = tree-sitter-eno (tree-sitter parser for eno, usable with C++ bindings)
logo = /logos/cpp.svg
url = https://github.com/eno-lang/tree-sitter-eno

platform:
label = tree-sitter-eno (tree-sitter parser for eno, usable with Rust bindings)
logo = /logos/rust.svg
url = https://github.com/eno-lang/tree-sitter-eno

platform:
label = tree-sitter-eno (tree-sitter parser for eno, usable with WebAssembly bindings)
logo = /logos/wasm.svg
url = https://github.com/eno-lang/tree-sitter-eno

platform:
label = tree-sitter-eno (tree-sitter parser for eno, usable with JavaScript bindings)
logo = /logos/javascript.svg
url = https://github.com/eno-lang/tree-sitter-eno

platform:
label = tree-sitter-eno (tree-sitter parser for eno, usable with Python bindings)
logo = /logos/python.svg
url = https://github.com/eno-lang/tree-sitter-eno

platform:
label = tree-sitter-eno (tree-sitter parser for eno, usable with Ruby bindings)
logo = /logos/ruby.svg
url = https://github.com/eno-lang/tree-sitter-eno

platform:
label = tree-sitter-eno (tree-sitter parser for eno, usable with Haskell bindings)
logo = /logos/haskell.svg
url = https://github.com/eno-lang/tree-sitter-eno

platform:
label = enophp (Official PHP library compliant with eno's first specification)
logo = /logos/php.svg
url = https://archived.eno-lang.org/php/

platform:
label = Enohar (In development Java library for parsing and emitting eno documents)
logo = /logos/java.svg
url = https://github.com/Nzen/Enohar

platform:
label = enotcl (Tcl parser)
logo = /logos/tcl.svg
url = https://github.com/bef/enotcl

-- description

[tree-sitter-eno](https://github.com/eno-lang/tree-sitter-eno) - Tree-sitter parser for eno (usable with C, C++, Rust, WebAssembly, JavaScript, Python, Ruby, Haskell)  
[enophp](https://github.com/eno-lang/enophp) - Official PHP library (compliant with eno first, see below)  
[enotcl](https://github.com/bef/enotcl) - Tcl parser  
[Enohar](https://github.com/Nzen/Enohar) - (Incomplete) Java library for parsing and emitting Eno documents  
[eno first](https://archived.eno-lang.org) - Legacy ecosystem and documentation for eno's first specification
-- description
