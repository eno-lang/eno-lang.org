title: The eno notation language and libraries

# content

> TODO: Turn the eno snippet into a carousel-style whirlwind tour / teaser video that showcases all landmark features
> TODO: For plugins consider listing the "package manager/marketplace" links as well as repository links where both are available
-- markdown
# The eno notation language

LAST_UPDATE

```eno
author: Jane Doe
email: jane@eno-lang.org

-- my_content
Multi-line embedded content (e.g. markdown) here ...
-- my_content

states:
active = #fff
hover = #b6b6b6

# cities
Den Haag: 52.069961, 4.302315
Málaga: 36.721447, -4.421291
서울특별시: 37.566984, 126.977041

# cities expanded < cities
Springfield: 38.790312, -77.186418
```

eno is a structured, plain-text notation language, related in many ways to its
ancestors and relatives JSON, YAML, TOML, ArchieML, StrictYAML, and others.
Through its simple syntax and versatile nature it targets a wide audience, both
in regards to cultural background as well as technical ability. As a modern
foundational technology for file-based content it enables highly productive and
reliable application development, and the possibility to create file-based
content applications for a wider and more diverse user audience than was
previously possible.

- [Guide](/guide/) — The entire language explained in just a few minutes.
- [Playground](/playground/) — Example documents you can interactively modify and study.
- [Specification](/specification/) — Encoding, extension, MIME type and implementation details.

# IDE/Editor Plugins

- [Ace](https://github.com/eno-lang/ace-eno/)
- [Atom](https://atom.io/packages/language-eno)
- [Prism](https://github.com/eno-lang/prism-eno/)
- [Sublime Text](https://packagecontrol.io/packages/eno)
- [Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=eno-lang.vscode-eno)

# Libraries

## enolib

The eno standard library, available in JavaScript, Python and Ruby.

```javascript
import enolib from 'enolib';

const document = enolib.parse(`
  author: Jane Doe
  title:
`);

document.field('author').requiredStringValue();
  // returns 'Jane Doe'
  
document.field('title').requiredStringValue();
  // throws "The field 'title' must contain a value.
  //
  //   Line | Content
  //      1 | author: Jane Doe
  // >    2 | title:
  //
```

Overview:
- Dynamically extensible query API for custom and third party type support
- Cursor lookup API (by index or line/column) for easy authoring of rich IDE plugins
- Querying equals validating - guaranteed data structure and type-safety
- Fully localized, handwritten, team-friendly error messages
- Rich error metadata: message, document snippet, cursor position, selection range

All implementations are dependency-free,
[localized](https://github.com/eno-lang/enolib/tree/master/locales) and [rank
among the fastest parsers](https://github.com/eno-lang/benchmarks/) for
plaintext content.
 
[Repository on GitHub](https://github.com/eno-lang/enolib/)

- JavaScript [API Documentation](/enolib/javascript/) / [Package on npm](https://npmjs.com/package/enolib/)
- Python [API Documentation](/enolib/python/) / [Package on PyPI](https://pypi.org/project/enolib/)  
- Ruby [API Documentation](/enolib/ruby/) / [Gem on rubygems](https://rubygems.org/gems/enolib)  
- Rust (planned, partially implemented)

### Benchmarks

Comparative evaluation of enolib and popular toml and yaml libraries in JavaScript, Python and Ruby.

[Open on GitHub](https://github.com/eno-lang/benchmarks/)

### Interactive Demos

Some examples to showcase different usecases for enolib as interactive demos in the browser.

[Interactive Demos](/enolib/demos/)

## enotype

**A cross-language type library.**
enotype is a collection of minimalist pure functions that validate and convert type-unsafe `string` representations into type-safe, native types.
It is the standard type library for [enolib](https://github.com/eno-lang/enolib/) but can be utilized in a multitude of other contexts as well.

enotype not only normalizes validating and converting common types across different programming languages,
but it also consistently localizes the user errors it produces across different human languages:

Functional type implementations for use with (or without) enolib.
enotype is a collection of functions that convert unsafe `string` input to safe, native types. It is the standard type library for [enolib](https://github.com/eno-lang/enolib/) but can be utilized in a multitude of other contexts as well.

## libeno

A new low-level reference parser written in C ([libeno](https://codeberg.org/simonrepp/libeno)) is currently in development.

## Other libraries

[tree-sitter-eno](https://github.com/eno-lang/tree-sitter-eno) - Tree-sitter parser for eno (usable with C, C++, Rust, WebAssembly, JavaScript, Python, Ruby, Haskell)  
[enophp](https://github.com/eno-lang/enophp) - Official PHP library (compliant with eno first, see below)  
[enotcl](https://github.com/bef/enotcl) - Tcl parser  
[Enohar](https://github.com/Nzen/Enohar) - (Incomplete) Java library for parsing and emitting Eno documents  

# History

The first draft for what is now known as eno notation was sketched out in early
2018 during R&D on a large publishing project around file-based content.  It was
designed and developed by [Simon Repp](https://simonrepp.com/), and still is to
this day. Many contributions were made by people who have offered their
cultural, technical and personal insight, reported bugs and submitted code and
corrections and set out to develop their own libraries for eno notation - I'd
like to hereby express my gratitude to all of you, thank you for being part of
this adventure.

# Present And Future

As of early summer 2020 major efforts are made to enable eno notation usage in
native development (C, C++, Go, Rust, et al). Therein the development of a new
C-based reference parsing library will serve as a vehicle for clearly specifying
and thereby resolving the last remaining ambiguities in the specification.

Building on top of the new reference parser, research on a native and
cross-platform parsing code generator is planned for the near future, enabling
developers to obtain fully functional data serialization code for multiple
languages based on a schema language that is to be defined in the process.

The mid and long term vision is to endeavour for standardization of eno notation
either by institutional backing or through establishment of a de-facto standard
through the power of community. If you sympathize with this vision, I invite you
to the join into our endeavour and help make it happen.

For the latest developments you can subscribe to the [blog](https://eno-lang.org/blog/).

# Contact

For concrete technical issues or questions feel free to open issues in the
respective repositories.

If you just want to get in touch directly, write a mail
to <simon@fdpl.io> or reach out through the fediverse at
[@freebliss@post.lurk.org](https://post.lurk.org/@freebliss).
-- markdown
