title: The eno notation language and libraries

# content

## columns-2

-- markdown
# The eno notation language

A modern plaintext data format, designed from the ground up for file-based
content - [simple](/introduction/),
[powerful](/advanced/) and elegant:

```eno
author: Jane Doe
email: jane@eno-lang.org

-- my_content
Multi-line embedded content (e.g. markdown) here ...
-- my_content

states:
active = #fff
hover = #b6b6b6

# cities
Den Haag: 52.069961, 4.302315
Málaga: 36.721447, -4.421291
서울특별시: 37.566984, 126.977041

# cities expanded < cities
Springfield: 38.790312, -77.186418
```

Language Overview:
- As fast to write and edit as it probably gets
- Intuitive and simple - easy to use for non-programmers too
- No indentation, all empty lines and whitespace optional
- No type syntax rules and restrictions on the language level
- Documents map to ubiquitous structural types in all programming languages
- Powerful advanced features - copy, merge, deep merge elements

Usecases:
- Authoring blogs, up to entire websites, from the macro to the micro level
- Generating documentation, invoices, CVs, reports, you name it
- Large scale textfile-based databases and archives
- Configuration files, from the simplest to the most complex

Visit [eno-lang.org/language](/language/) for more information.
-- markdown

-- markdown

# The eno libraries

[Blazing fast](https://github.com/eno-lang/benchmarks/), zero-dependency, [fully documented](/libraries/) eno parsers
for [JavaScript](/javascript/), [PHP](/php/)
[Python](/python/), [Ruby](/ruby/) (and
soon also [Rust](https://github.com/eno-lang/enors/)) - featuring a powerful, expressive API:

```ruby
# Ruby example (JavaScript / PHP / Python APIs are identical)
require 'enorb'

document = Eno.parse(
  File.read('example.eno'),
  locale: :es,                   # Fully localized error messages
  reporter: Eno::Reporters::HTML # Multi-format error messages
)

document.string('author', required: true)  # accessing = validating
  #=> 'Jane Doe'
document.section('cities').lat_lng('Málaga')  # high-level types
  #=> { lat: 36.721447, lng: -4.421291 }
document.lookup(9, 12)  # "What's at line 9, column 12?"
  #=> {
  #   element: #<Eno::Field name="hover" value="#b6b6b6">,
  #   zone: :value
  # }
```

Libraries Overview:
- Data access = Data validation = Guaranteed data structure and type-safety
- High-level types for emails, urls, colors, ... included out of the box
- Custom type loaders can be easily defined with simple closures/functions
- Fully localized, handwritten, human language error messages everywhere
- Rich error metadata - message, snippet, cursor position, selection range
- Both ordered and associative access to all data in the document

Usecases:
- Static site generation, scalable up to massive amounts of content
- Generating documentation, invoices, CVs, reports, you name it
- Highly reliable app configuration data with minimal development effort
- Content management tooling for apps, websites, editors, IDEs, ...

Visit [eno-lang.org/libraries](/libraries/) for more information.
-- markdown

## single

-- markdown

# Stay in the loop

Get development updates and info on new releases through the [newsletter](http://eepurl.com/dA9LcH).

# Available for

<div class="logo_parade">
  <a href="/javascript/"><img src="/javascript.svg" title="JavaScript" /></a>
  <a href="/php/"><img src="/php.svg" title="PHP" /></a>
  <a href="/python/"><img src="/python.svg" title="Python" /></a>
  <a href="/ruby/"><img src="/ruby.svg" title="Ruby" /></a>
  <a href="/ace/"><img src="/ace.png" title="Ace" /></a>
  <a href="/atom/"><img src="/atom.svg" title="Atom" /></a>
  <a href="/prism/"><img src="/prism.svg" title="Prism" /></a>
  <a href="/sublime/"><img src="/sublime.svg" title="Sublime Text" /></a>
  <a href="/vscode/"><img src="/vscode.svg" title="Visual Studio Code" /></a>
</div>
-- markdown
