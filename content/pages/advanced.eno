title: Advanced Features

# content

-- markdown
# Advanced Features

Complementary to the introduction, this page describes the remaining, more advanced features of eno. You should get to know them if you ...

- are curious, but afraid it might be too technical - go for it, it was written and recorded especially for you!
- work with very complex, very technical or high volume content - these features will save you time.
- are potentially interested in, or planning to, develop an application or website with eno.

## Copying (<)

eno works very well for authoring content in multiple languages, imagine the following document layout for a blog post:

```eno
# English

title: FAQ
permalink: faq

-- text
Here you find answers to frequently asked questions:
...
-- text
```

If we just wanted to duplicate that page for another language, we can write the following line to do just that:

```eno
# German < English
```

This creates a section with the key "German" and copies everything that exists in the section "English" over to that new section.

As in this case "FAQ" is the same in german and english we only would need to replace the text, which we can do like this:

```eno
# German < English

-- text
Hier findest du Antworten auf oft gestellte Fragen:
...
-- text
```

By copying we get all fields from the english section, and by specifying a new `text` we are overwriting only that specific element, leaving the copied `title` and `permalink` intact.

## Fieldsets (=)

```eno
color ratings:
green = 3
red = 4
blue = 1
```

Fieldsets allow us to group fields without the need to specify an entire section. They start like a field or list (with a key and a colon),
and go on as long as fieldset entries follow, which are differentiated from regular fields by their operator, an equals sign (`=`).
Just as in sections, any key can appear multiple times, but applications may choose to accept only unique keys when that behavior fits the usecase better.

Fieldsets can be copied (like everything else in eno), in which case you can actually redeclare an existing fieldset entry key,
which allows you to override its value in the copied fieldset:

```eno
image:
src = glass.jpg
title = A glass, half full.

image_2 < image
title = A glass, half empty.
```

## Spaced (\\) and direct (|) line continuations

When a value gets overly long, or you would like to split it into multiple lines for readability (e.g. for commandline flags or GET parameters) you can use line continuations:

```eno
A commandline poem: roses --are-red
\                         --violets are-blue
\                         --whitespace-is-ignored
``` 

With a backslash (`\`) you declare a *spaced line continuation*, whatever you write on
that line is appended to the end of the field before it, separated by a single
space. Note that like everywhere else in eno, whitespace plays no role, so this
is equivalent of the above example:

```eno
A commandline poem:
    \ roses --are-red
          \ --violets are-blue
          
      \ --whitespace-is-ignored
```

With a vertical slash/pipe character (`|`) you declare a *direct line continuation*, whatever you write on that line
is also appened to the previous field, but directly and without any spacing inbetween:

```eno
A URL poem: https://roses.are.red/?violets=are-blue&
|                                  whitespace=does-not-matter
```

Final remark: *spaced* and *direct line continuations* can be mixed in any fashion:

```eno
command: hashify -i this-is-very-long-i-dont-even-know-when-this-key-is-
|                   going-to-end-therefore-i-am-happy-about-the-existence-
|                   of-direct-line-continuations
\                -o output.hashed
\                --verbose
```

## Deep copying (<<)

Deep copying works like copying, except you use two angle brackets (`<<`) instead of one,
which in turn allows you to overwrite and/or add fields inside deeply nested section hierarchies.

```eno
# default
id:
## settings
hyperservice: disabled

# production << default
id: prod
## settings
ultraservice: enabled
```

In this example the resulting `# production` section will contain both `hyperservice` and `ultraservice`
inside its `## settings` subsection, whereas if you used only a regular copy operation (single `<`),
the `## settings` from `# default` would have been completely overwritten, deleting `hyperservice` and
leaving only `ultraservice`. A typical usecase for this feature are complex server configurations.

## Escaping (``)

Let's assume someone wrote an eno document describing which clothing to wear at different temperatures:

```eno
30 degrees celsius: Swimming trunks
10 degrees celsius: Warm pullover and windjacket
`-10 degrees celsius`: A very warm coat
```

You'll notice that something is different in the third line: The `-10 degrees celsius` has been put between two backticks ( `` ` `` ).

Here's why:  
`-10 degrees celsius` starts with a `-`, and in eno every line starting with a `-` is interpreted as a *list item* as we learned before, therefore we need some way to say that we really mean "minus 10 degrees celsius" and not "10 degrees celsius" as an item in a list.

Here are some more examples of escaping in eno:

```eno
`https://eno-lang.org/`: The eno website
```
Every field in eno follows the pattern `key: value`, but in this case our key `https://eno-lang.org/` contains a `:` already, therefore we need to escape it.

```eno
`` `hypothetical` ``: The word "hypothetical" inside backticks
```
You might have wondered how an escape can be escaped, this is achieved by using two backticks around the key that is itself wrapped in (single) backticks, and leaving spaces so it does not look like three backticks. (these spaces on the outside are not included in the key though)
-- markdown
