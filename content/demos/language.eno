# Starters

## Hello World

-- eno
> A simple single field named 'Hello' with the value 'World'.

Hello: World
-- eno

## Frontpage demo

-- eno
> The example document from the eno-lang.org frontpage

author: Jane Doe
email: jane@eno-lang.org

-- my_content
Multi-line embedded content (e.g. markdown) here ...
-- my_content

states:
active = #fff
hover = #b6b6b6

# cities
Den Haag: 52.069961, 4.302315
Málaga: 36.721447, -4.421291
서울특별시: 37.566984, 126.977041

# cities expanded < cities
Springfield: 38.790312, -77.186418
-- eno


# Reference examples

## Comments

-- eno
> This is a comment

> A comment always has its own line
  
  > Nothing except whitespace can come before a comment
  
      > There can be any number of whitespace before a comment

> Comments can also be empty:
>

-- eno

## Fields

-- eno
> A field has a name and a value
language: eno

> The value does not reach beyond the line
language:|<--- eno --->|

> The value can be empty
language:

> Whitespace outside of and between name, operator and value is ignored
language:eno
  language  :  eno  
  
> As you see above, multiple fields with the same name are possible,
> whether they are allowed is decided by the application.

> Anything goes after the name operator (:)
This is a sentence: It was a night full of ⭐s and 🤖s in 서울특별시!

> Almost anything goes before the name operator too
It was a night full of ⭐s and 🤖s in 서울특별시!: That was a sentence.

> Some things are not allowed in the name, they need to be escaped
`The : in a name needs to be escaped`: The : in a value is fine

> Here's everything that needs to be escaped in a name, and why:

`1:0`: At the first : the name ends, it always needs to be escaped

A-Z: The - is fine when it's preceded by something else
`-AZ`: The - at the start would start a list item

A # of things : The # is fine if it does not start the name
`# of things`: The # at the start would start a section

Php\Namespace : The \ is fine if it's not the first non-whitespace character
`\Php\Namespace`: The \ at the start would start a line continuation

Left|Right : The | is fine if it's not the first character in the name
`|Right`: The | at the start would start a newline continuation

Greater > Smaller: The > is fine if it's not the first thing in the name
`> Smaller`: The > at the start would start a comment
-- eno

## Fieldsets

-- eno
> An empty fieldset
my_fieldset:


> A fieldset with a single entry
my_fieldset:
my_entry = my value


> A fieldset with two entries
> (note that unlike fields in sections, entry names in a fieldset MUST be unique)
my_fieldset:
my_entry_a = my value
my_entry_b = my value


my_fieldset:

> There can be comments and any number of empty lines between fieldset entries
my_entry_a =  my value

my_entry_b = my value


my_fieldset:
my_entry = my value
> You can use line and newline continuations for fieldset entries just like with regular fields
\ continued


> Just for clarity, this is NOT a fieldset, but a field with the value "my_entry = my value"
NOT_a_fieldset: my_entry = my value
-- eno

## Lists

-- eno
> An empty list
my_list:


> A list with a single value
my_list:
- my value


> A list with two values
my_list:
- my value
- my value


my_list:

> There can be comments and any number of empty lines between list items
- my value

- my value


my_list:
- my value
> You can use line and newline continuations for list items just like with fields
\ continued


> Just for clarity, this is NOT a list, but a field with the value "- my value"
NOT_a_list: - my value
-- eno

## Sections

-- eno
> A section called my_section
# my_section


> There is no syntactic differentiation between a section and a list of
> sections, you just provide multiple sections with the same name if you need
> multiple sections (applications define and validate the structure of your
> document through the eno library API, so they know what they get anyway)
# my_section
# my_section


> A section nested within the last my_section above
## my_subsection


> A section that is sibling to my_subsection above
## my_sibling_subsection


> A section that is nested within my_sibling_subsection
### my_subsection

> You can go indefintely deeper, but only one layer (#)
> deeper at a time, the following would be an error:
> ##### my_subsection


> A section that is sibling to my_section above
# my_sibling_section


> This is possible - a section called #my_section
# #my_section


> This would be a nested section called my_section however
##my_section

-- eno

# Real usecase examples

## eno's javascript benchmark suite data

-- eno
> This (generated) file just stores a simple hierarchy with numerical data, there
> is a top-level section 'javascript' with some metadata ('iterations',
> 'evaluated'), as well as a number of subsections, whose names
> ('abstract_hierarchy', ...) identify the respective benchmark scenario and
> contain a mapping between library name and measured time, represented as fields.
> 
> The rendered markdown report generated on the basis of this data can be studied
> at: https://github.com/eno-lang/benchmarks/blob/master/README.md

# javascript

iterations: 100000
evaluated: Fri Jul 06 2018 09:46:48 GMT+0200 (Central European Summer Time)

## abstract_hierarchy

enojs 0.13.1: 1.5550807799994946
js-yaml 3.12.0: 1.694576124000363
toml 2.3.3: 65.55331487999298
toml-j0.4 1.1.1: 6.312734825999476

## content_heavy

enojs 0.13.1: 0.9270273759998381
js-yaml 3.12.0: 7.022947545999661
toml 2.3.3: 7908.529771699942
toml-j0.4 1.1.1: 322.25691260000696

## invented_server_configuration

enojs 0.13.1: 2.3261210409998894
js-yaml 3.12.0: 1.6458558410005644
toml 2.3.3: 100.17921198000201
toml-j0.4 1.1.1: 9.905643093000165

## jekyll_post_example

enojs 0.13.1: 0.8634771769996733
js-yaml 3.12.0: 0.8431343219997361
toml 2.3.3: 150.86338325999677
toml-j0.4 1.1.1: 11.36234141800087

## journey_route_data

enojs 0.13.1: 3.548835017999634
js-yaml 3.12.0: 3.791881393999793
toml 2.3.3: 100.99689596000127
toml-j0.4 1.1.1: 15.330702254999428

## yaml_invoice_example

enojs 0.13.1: 3.9504174440000206
js-yaml 3.12.0: 2.61872482699994
toml 2.3.3: 55.12786359500047
toml-j0.4 1.1.1: 12.161507735999301

-- eno

## A record for an institution from the file-based dérive (http://derive.at/) research database

-- eno
> This specific record is from an archive collection documenting players in the
> field of urban studies. There are simple fields for the name, place and website,
> a list element with tags, and at the bottom two blocks that embed longer text
> descriptions. The field names are german because the database principally
> consists of german language content and is maintained by german native speakers.
> eno allows working with documents that can be fully authored in any language,
> as it allows the full unicode range in keys too.

Name: WE THE PEOPLE OF DETROIT COMMUNITY RESEARCH COLLECTIVE
Vorname:
Nachname:
Land: United States
Stadt: Detroit

Tags:
- Detroit
- Community
- Research

Website: https://wethepeopleofdetroit.com/
Permalink: we-the-people-of-detroit-community-research-collective

-- Biographie
We the People of Detroit Community Research Collective (WTP CRC) is a
collaboration between community activists, academics, researchers and designers.
-- Biographie

-- Text
We the People of Detroit Community Research Collective (WTP CRC) is a
collaboration between community activists, academics, researchers and designers.
Our research is produced with and for the citizens of Detroit. This research has
been used in a wide range of settings, from community organizing to legal and
legislative work. We hope that our work will be of further use to Detroiters in
their efforts to build a more democratic city.
-- Text

-- eno

## Deployment configuration for an automated publishing system (anonymized)

-- eno
> This configuration file specifies a 'defaults' section which holds a 'host' and
> 'user' field. The 'defaults' are copied into the actual deployment configuration
> entries, so they don't need to be repeated, while still remaining customizable
> for single entries too.

# defaults
host: x71947-ssh.services.example-host.com
user: x71947

# backup.example.com < defaults
directory: /data/web/x71947/html/backup.example.com

# city.example-event.com < defaults
directory: /data/web/x71947/html/city.example-event.com

# example.com < defaults
directory: /data/web/x71947/html/example.com

# staging.example.com < defaults
directory: /data/web/x71947/html/staging.example.com

# staging.example-event.com < defaults
directory: /data/web/x71947/html/staging.example-event.com

# staging.city.example-event.com < defaults
directory: /data/web/x71947/html/staging.city.example-event.com

# example-event.com < defaults
directory: /data/web/x71947/html/example-event.com

-- eno

# What if ... ? examples

## Cargo.eno

-- eno
> This is a hypothetical example demonstrating how a Cargo.toml file (Rust's
> package definition standard) could look like if it were authored in eno. It is
> provided not to proclaim that Rust's packages should be specified in eno, but as
> a way to learn about how eno represents a data structure that you might be
> familiar with already.
>
> This content was adapted from the `regex` crate
> (https://github.com/rust-lang/regex/blob/master/Cargo.toml),
> all credits and many thanks go to its authors.

# package
name: regex
version: 1.1.0
authors:
- The Rust Project Developers
license: MIT/Apache-2.0
readme: README.md
repository: https://github.com/rust-lang/regex
documentation: https://docs.rs/regex
homepage: https://github.com/rust-lang/regex

-- description
An implementation of regular expressions for Rust. This implementation uses
finite automata and guarantees linear time matching on all inputs.
-- description

categories:
- text-processing
autotests: false
exclude:
- /.travis.yml
- /appveyor.yml
- /ci/*
- /scripts/*

# badges
travis-ci:
repository = rust-lang/regex
appveyor:
repository = rust-lang-libs/regex

# workspace
members:
- bench
- regex-capi
- regex-debug
- regex-syntax

# dependencies
> For very fast prefix literal matching.
aho-corasick: 0.6.7
> For skipping along search text quickly when a leading byte is known.
memchr: 2.0.2
> For managing regex caches quickly across multiple threads.
thread_local: 0.3.6
> For parsing regular expressions.
regex-syntax:
path = regex-syntax
version = 0.6.2
> For compiling UTF-8 decoding into automata.
utf8-ranges: 1.0.1

# dev-dependencies
> For examples.
lazy_static: 1
> For property based tests.
quickcheck:
version = 0.7
default-features = false
> For generating random test data.
rand: 0.5

# features
default:
- use_std
> The 'use_std' feature permits the regex crate to use the standard library.
> This is intended to support future use cases where the regex crate may be
> able to compile without std, and instead just rely on 'core' and 'alloc'
> (for example). Currently, this isn't supported, and removing the 'use_std'
> feature will prevent regex from compiling.
use_std:
> A blanket feature that governs whether unstable features are enabled or not.
> Unstable features are disabled by default, and typically rely on unstable
> features in rustc itself.
unstable:
- pattern
> Enable to use the unstable pattern traits defined in std. This is enabled
> by default if the unstable feature is enabled.
pattern:

# lib
> There are no benchmarks in the library code itself
bench: false

> Run the test suite on the default behavior of Regex::new.
> This includes a mish mash of NFAs and DFAs, which are chosen automatically
> based on the regex. We test both of the NFA implementations by forcing their
> usage with the test definitions below. (We can't test the DFA implementations
> in the same way since they can't be used for every regex tested.)
# test
path: tests/test_default.rs
name: default

> The same as the default tests, but run on bytes::Regex.
# test
path: tests/test_default_bytes.rs
name: default-bytes

> Run the test suite on the NFA algorithm over Unicode codepoints.
# test
path: tests/test_nfa.rs
name: nfa

> Run the test suite on the NFA algorithm over bytes that match UTF-8 only.
# test
path: tests/test_nfa_utf8bytes.rs
name: nfa-utf8bytes

> Run the test suite on the NFA algorithm over arbitrary bytes.
# test
path: tests/test_nfa_bytes.rs
name: nfa-bytes

> Run the test suite on the backtracking engine over Unicode codepoints.
# test
path: tests/test_backtrack.rs
name: backtrack

> Run the test suite on the backtracking engine over bytes that match UTF-8
> only.
# test
path: tests/test_backtrack_utf8bytes.rs
name: backtrack-utf8bytes

> Run the test suite on the backtracking engine over arbitrary bytes.
# test
path: tests/test_backtrack_bytes.rs
name: backtrack-bytes

> Run all backends against each regex found on crates.io and make sure
> that they all do the same thing.
# test
path: tests/test_crates_regex.rs
name: crates-regex

# profile

## release
debug: true

## bench
debug: true

## test
debug: true
-- eno

## package.eno

-- eno
> This is a hypothetical example demonstrating how a package.json file (node's
> package definition standard) could look like if it were authored in eno. It is
> provided not to proclaim that node's packages should be specified in eno, but as
> a way to learn about how eno represents a data structure that you might be
> familiar with already.
>
> This content was adapted from the `js-yaml` package
> (https://github.com/nodeca/js-yaml/blob/master/package.json),
> all credits and many thanks go to its authors.

name: js-yaml
version: 3.12.0
description: YAML 1.2 parser and serializer

keywords:
- yaml
- parser
- serializer
- pyyaml

homepage: https://github.com/nodeca/js-yaml
author: Vladimir Zapparov <dervus.grim@gmail.com>

contributors:
- Aleksey V Zapparov <ixti@member.fsf.org> (http://www.ixti.net/)
- Vitaly Puzrin <vitaly@rcdesign.ru> (https://github.com/puzrin)
- Martin Grenfell <martin.grenfell@gmail.com> (http://got-ravings.blogspot.com)

license: MIT
repository: nodeca/js-yaml

files:
- index.js
- lib/
- bin/
- dist/

bin:
js-yaml = bin/js-yaml.js

dependencies:
argparse = ^1.0.7
esprima = ^4.0.0

devDependencies:
ansi = ^0.3.1
benchmark = ^2.1.4
browserify = ^16.2.2
codemirror = ^5.13.4
eslint = ^4.1.1
fast-check = 1.1.3
istanbul = ^0.4.5
mocha = ^5.2.0
uglify-js = ^3.0.1

scripts:
test = make test
-- eno

## .gitlab-ci.eno

-- eno
> This is a hypothetical example demonstrating how a .gitlab-ci.yml file (gitlab's
> CI configuration standard) could look like if it were authored in eno. It is
> provided not to proclaim that gitlab's CI config should be specified in eno, but as
> a way to learn about how eno represents a data structure that you might be
> familiar with already.
>
> This content was adapted from the `inkscape` repository
> (https://gitlab.com/inkscape/inkscape/blob/master/.gitlab-ci.yml),
> all credits and many thanks go to its authors.

> Dependencies are managed in the Dockerfile in the inkscape-ci-docker
> Git repository. Change them there, wait a bit, and then we'll use
> the new ones here in these builds.
image: registry.gitlab.com/inkscape/inkscape-ci-docker/master

variables:
GIT_DEPTH = 10
GIT_SUBMODULE_STRATEGY = recursive

> Building inkscape
# inkscape:linux

stage: build

except:
- schedules
    
before_script:
> CCache Config
- mkdir -p ccache
- export CCACHE_BASEDIR=${PWD}
- export CCACHE_DIR=${PWD}/ccache

script:
- mkdir -p build/conf
- ln -s . share/inkscape
- cd build
- cmake .. -DCMAKE_C_COMPILER_LAUNCHER=ccache
\          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
\          -DCMAKE_BUILD_TYPE=Debug
\          -DCMAKE_INSTALL_PREFIX:PATH=$PWD/install_dir/
- make -j3 install
- make -j3 tests
- cpack -G DEB
- cd ..

## artifacts
expire_in: 1 year
paths:
  - build/
    
## cache
key: cache-linux
paths:
  - ccache/

# inkscape:mac

stage: build

tags:
- mac

only:
- branches@inkscape/inkscape

except:
- schedules

before_script:
- brew update
- brew upgrade
> Tools
- brew install cmake intltool libtool pkg-config ccache
> Libraries
- brew install bdw-gc boost gdl gettext gsl gtkmm3 gtkspell3 imagemagick@6 jemalloc libcdr libvisio libyaml libwpg pango popt poppler potrace libsoup
> Testing tools
> TODO
> Cleanup
- brew cleanup
> CCache Config
- mkdir -p ccache
- export CCACHE_BASEDIR=${PWD}
- export CCACHE_DIR=${PWD}/ccache
  
script:
- mkdir -p build
- cd build
- cmake .. -DCMAKE_PREFIX_PATH="/usr/local/opt/gettext;/usr/local/opt/imagemagick@6/;/usr/local/opt/icu4c/"
\          -DWITH_OPENMP=OFF
\          -DCMAKE_C_COMPILER_LAUNCHER=ccache
\          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
\          -DCMAKE_BUILD_TYPE=Debug
- make -j1
- cd ..

allow_failure: true

## artifacts
expire_in: 1 year
paths:
- build/

## cache
key: cache-mac
paths:
- ccache/

> uh uh

# codequality

stage: build

except:
- schedules

script:
- git fetch https://gitlab.com/inkscape/inkscape.git
- echo "Your commit does not comply exactly with the clang-format style checker.\nPlease review the following diff or apply it with\n \$ git apply <<EOF"
- git diff FETCH_HEAD -U0 --no-color | clang-format-diff-6.0 -p1 -style file | tee clang_format_diff
- echo "EOF"
- if [[ -s clang_format_diff ]]; then false; fi

allow_failure: true

# codeprotect

stage: build

except:
- schedules

script:
- git fetch https://gitlab.com/inkscape/inkscape.git
- git diff FETCH_HEAD -U0 --no-color src/2geom/ src/3rdparty/adaptagrams/ src/3rdparty/libdepixelize src/3rdparty/libuemf | tee forbidden
- if [[ -s forbidden ]]; then echo "This commit modifies files that are in an dependency library. Make sure you update upstream first, *then* force the merge in Inkscape."; false; fi

# source-doc

stage: build

script:
- cd buildtools
- doxygen Doxyfile
- doxygen Doxyfile-extensions
- cd ..

## artifacts
paths:
- doc/doxygen
- doc/doxygen-extensions

## only
variables:
- $SCHEDULED_JOB_NAME == "source-doc"

> This job is a static analysis build by clang.
> It takes MORE THAN 3 HOURS, and depending on worker sometimes 4 hours.
> Make sure the timeout of the build is big enough
# clang

stage: build

script:
- apt-get update -yqq && apt-get install -y clang
- mkdir -p clang-build
- cd clang-build
- scan-build cmake .. -DCMAKE_BUILD_TYPE=Debug
- VERBOSE=1 scan-build -o ../scan make -j2
  
## artifacts
paths:
- scan/

## only
variables:
- $SCHEDULED_JOB_NAME == "clang"

#test:linux

stage: test

except:
- schedules

dependencies:
- inkscape:linux

script:
- cd build
- ctest -V

# check-license-headers

stage: build

except:
- schedules

script:
- python buildtools/check_license_headers.py

# translations
stage: build

except:
- schedules

-- script
# make sure dependencies for inkscape.pot are up-to-date
mkdir build && cd build && cmake .. && make inkscape_pot && cd ..
cd po/

# update POTFILES.in
grep -v "^#" POTFILES.in > POTFILES.in.1
./generate_POTFILES.sh
grep -v "^#" POTFILES.in > POTFILES.in.2

# update inkscape.pot and sync all .po files
intltool-update --pot && mv untitled.pot inkscape.pot
./update_po_files.sh

# check if POTFILES.in should be updated in the repo (shall we automate this?)
if [ -n "$(diff POTFILES.in.1 POTFILES.in.2)" ]; then
  git diff POTFILES.in;
  echo "New translatable strings in source files found.";
  echo "Please add the paths to POTFILES.in so they can be translated";
  echo "(or add them to POTFILES.skip to exlude them from translations).";
  exit 1;
fi

rm POTFILES.in.1 POTFILES.in.2
-- script

## artifacts
name: translations
paths:
- po/
when: always

> uploads the clang scan to user.gitlab.io/inkscape/
# pages

stage: deploy

only:
  - schedules
  
dependencies:
  - source-doc
  - clang
  
script:
- mkdir -p public/
- sed "s/%DATE%/$(date '+%B %d, %Y')/" buildtools/ci-index.html > public/index.html
- if test -e scan; then cp -rv scan/* public/scan-build; fi
- if test -e doc/doxygen; then cp -rv doc/doxygen/html public/doxygen; fi
- if test -e doc/doxygen-extensions; then cp -rv doc/doxygen-extensions/html public/doxygen-extensions; fi

## artifacts
paths:
- public

-- eno
